// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package structs

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	net "net"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF8120 = 1
	codecSelferC_RAW120  = 0
	// ----- value types used ----
	codecSelferValueTypeArray120 = 10
	codecSelferValueTypeMap120   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey120    = 2
	codecSelfer_containerMapValue120  = 3
	codecSelfer_containerMapEnd120    = 4
	codecSelfer_containerArrayElem120 = 6
	codecSelfer_containerArrayEnd120  = 7
)

var (
	codecSelferBitsize120                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr120 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer120 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 net.IP
		var v1 time.Duration
		_, _ = v0, v1
	}
}

func (x MessageType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1 := z.EncBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeUint(uint64(x))
	}
}

func (x *MessageType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*uint8)(x)) = uint8(r.DecodeUint(8))
	}
}

func (x *QueryOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *QueryOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *QueryOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv6 := &x.MinQueryIndex
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv8 := &x.MaxQueryTime
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv10 := &x.AllowStale
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv12 := &x.Prefix
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *QueryOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv15 := &x.Region
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv17 := &x.MinQueryIndex
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv19 := &x.MaxQueryTime
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv19) {
		} else {
			*((*int64)(yyv19)) = int64(r.DecodeInt(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv21 := &x.AllowStale
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv23 := &x.Prefix
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *WriteRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *WriteRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *WriteRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *WriteRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv7 := &x.Region
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*string)(yyv7)) = r.DecodeString()
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *QueryMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *QueryMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *QueryMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv4 := &x.Index
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv6 := &x.LastContact
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else {
					*((*int64)(yyv6)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv8 := &x.KnownLeader
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*bool)(yyv8)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *QueryMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv11 := &x.Index
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv13 := &x.LastContact
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv13) {
		} else {
			*((*int64)(yyv13)) = int64(r.DecodeInt(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv15 := &x.KnownLeader
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*bool)(yyv15)) = r.DecodeBool()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *WriteMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *WriteMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *WriteMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv4 := &x.Index
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *WriteMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv7 := &x.Index
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NodeRegisterRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Node == nil {
					r.EncodeNil()
				} else {
					x.Node.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Node"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Node == nil {
					r.EncodeNil()
				} else {
					x.Node.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NodeRegisterRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NodeRegisterRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Node":
			if r.TryDecodeAsNil() {
				if x.Node != nil {
					x.Node = nil
				}
			} else {
				if x.Node == nil {
					x.Node = new(Node)
				}
				x.Node.CodecDecodeSelf(d)
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv5 := &x.Region
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NodeRegisterRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Node != nil {
			x.Node = nil
		}
	} else {
		if x.Node == nil {
			x.Node = new(Node)
		}
		x.Node.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv9 := &x.Region
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NodeDeregisterRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NodeDeregisterRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NodeDeregisterRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv4 := &x.NodeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NodeDeregisterRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv9 := &x.NodeID
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv11 := &x.Region
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NodeServerInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.RPCAdvertiseAddr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("RPCAdvertiseAddr"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.RPCAdvertiseAddr))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.RPCMajorVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("RPCMajorVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.RPCMajorVersion))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.RPCMinorVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("RPCMinorVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.RPCMinorVersion))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Datacenter))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Datacenter"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Datacenter))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NodeServerInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NodeServerInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "RPCAdvertiseAddr":
			if r.TryDecodeAsNil() {
				x.RPCAdvertiseAddr = ""
			} else {
				yyv4 := &x.RPCAdvertiseAddr
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "RPCMajorVersion":
			if r.TryDecodeAsNil() {
				x.RPCMajorVersion = 0
			} else {
				yyv6 := &x.RPCMajorVersion
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int32)(yyv6)) = int32(r.DecodeInt(32))
				}
			}
		case "RPCMinorVersion":
			if r.TryDecodeAsNil() {
				x.RPCMinorVersion = 0
			} else {
				yyv8 := &x.RPCMinorVersion
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int32)(yyv8)) = int32(r.DecodeInt(32))
				}
			}
		case "Datacenter":
			if r.TryDecodeAsNil() {
				x.Datacenter = ""
			} else {
				yyv10 := &x.Datacenter
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NodeServerInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.RPCAdvertiseAddr = ""
	} else {
		yyv13 := &x.RPCAdvertiseAddr
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.RPCMajorVersion = 0
	} else {
		yyv15 := &x.RPCMajorVersion
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*int32)(yyv15)) = int32(r.DecodeInt(32))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.RPCMinorVersion = 0
	} else {
		yyv17 := &x.RPCMinorVersion
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*int32)(yyv17)) = int32(r.DecodeInt(32))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Datacenter = ""
	} else {
		yyv19 := &x.Datacenter
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NodeUpdateStatusRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NodeUpdateStatusRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NodeUpdateStatusRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv4 := &x.NodeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv6 := &x.Status
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NodeUpdateStatusRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv11 := &x.NodeID
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv13 := &x.Status
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv15 := &x.Region
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NodeUpdateDrainRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.Drain))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Drain"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.Drain))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NodeUpdateDrainRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NodeUpdateDrainRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv4 := &x.NodeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Drain":
			if r.TryDecodeAsNil() {
				x.Drain = false
			} else {
				yyv6 := &x.Drain
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NodeUpdateDrainRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv11 := &x.NodeID
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Drain = false
	} else {
		yyv13 := &x.Drain
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*bool)(yyv13)) = r.DecodeBool()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv15 := &x.Region
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NodeEvaluateRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NodeEvaluateRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NodeEvaluateRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv4 := &x.NodeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NodeEvaluateRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv9 := &x.NodeID
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv11 := &x.Region
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NodeSpecificRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.SecretID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("SecretID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.SecretID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NodeSpecificRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NodeSpecificRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv4 := &x.NodeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "SecretID":
			if r.TryDecodeAsNil() {
				x.SecretID = ""
			} else {
				yyv6 := &x.SecretID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv10 := &x.MinQueryIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv12 := &x.MaxQueryTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv14 := &x.AllowStale
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv16 := &x.Prefix
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NodeSpecificRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv19 := &x.NodeID
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.SecretID = ""
	} else {
		yyv21 := &x.SecretID
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv23 := &x.Region
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv25 := &x.MinQueryIndex
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv27 := &x.MaxQueryTime
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv27) {
		} else {
			*((*int64)(yyv27)) = int64(r.DecodeInt(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv29 := &x.AllowStale
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*bool)(yyv29)) = r.DecodeBool()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv31 := &x.Prefix
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobRegisterRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.EnforceIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EnforceIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.EnforceIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobRegisterRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobRegisterRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "EnforceIndex":
			if r.TryDecodeAsNil() {
				x.EnforceIndex = false
			} else {
				yyv5 := &x.EnforceIndex
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*bool)(yyv5)) = r.DecodeBool()
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv7 := &x.JobModifyIndex
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv9 := &x.Region
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*string)(yyv9)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobRegisterRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EnforceIndex = false
	} else {
		yyv13 := &x.EnforceIndex
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*bool)(yyv13)) = r.DecodeBool()
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv15 := &x.JobModifyIndex
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv17 := &x.Region
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobDeregisterRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobDeregisterRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobDeregisterRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobDeregisterRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv9 := &x.JobID
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv11 := &x.Region
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobEvaluateRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobEvaluateRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobEvaluateRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobEvaluateRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv9 := &x.JobID
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv11 := &x.Region
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobSpecificRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.AllAllocs))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllAllocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.AllAllocs))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobSpecificRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobSpecificRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "AllAllocs":
			if r.TryDecodeAsNil() {
				x.AllAllocs = false
			} else {
				yyv6 := &x.AllAllocs
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv10 := &x.MinQueryIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv12 := &x.MaxQueryTime
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv14 := &x.AllowStale
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv16 := &x.Prefix
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobSpecificRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv19 := &x.JobID
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllAllocs = false
	} else {
		yyv21 := &x.AllAllocs
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv23 := &x.Region
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv25 := &x.MinQueryIndex
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv27 := &x.MaxQueryTime
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv27) {
		} else {
			*((*int64)(yyv27)) = int64(r.DecodeInt(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv29 := &x.AllowStale
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*bool)(yyv29)) = r.DecodeBool()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv31 := &x.Prefix
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobListRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobListRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobListRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv6 := &x.MinQueryIndex
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv8 := &x.MaxQueryTime
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv10 := &x.AllowStale
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv12 := &x.Prefix
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobListRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv15 := &x.Region
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv17 := &x.MinQueryIndex
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv19 := &x.MaxQueryTime
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv19) {
		} else {
			*((*int64)(yyv19)) = int64(r.DecodeInt(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv21 := &x.AllowStale
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv23 := &x.Prefix
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobPlanRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.Diff))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Diff"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.Diff))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobPlanRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobPlanRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "Diff":
			if r.TryDecodeAsNil() {
				x.Diff = false
			} else {
				yyv5 := &x.Diff
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*bool)(yyv5)) = r.DecodeBool()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv7 := &x.Region
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*string)(yyv7)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobPlanRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Diff = false
	} else {
		yyv11 := &x.Diff
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*bool)(yyv11)) = r.DecodeBool()
		}
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv13 := &x.Region
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobSummaryRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobSummaryRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobSummaryRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv8 := &x.MinQueryIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv10 := &x.MaxQueryTime
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv12 := &x.AllowStale
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv14 := &x.Prefix
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobSummaryRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv17 := &x.JobID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv19 := &x.Region
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv21 := &x.MinQueryIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv23 := &x.MaxQueryTime
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv23) {
		} else {
			*((*int64)(yyv23)) = int64(r.DecodeInt(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv25 := &x.AllowStale
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*bool)(yyv25)) = r.DecodeBool()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv27 := &x.Prefix
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobDispatchRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW120, []byte(x.Payload))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Payload"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW120, []byte(x.Payload))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Meta"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobDispatchRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobDispatchRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Payload":
			if r.TryDecodeAsNil() {
				x.Payload = nil
			} else {
				yyv6 := &x.Payload
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*yyv6 = r.DecodeBytes(*(*[]byte)(yyv6), false, false)
				}
			}
		case "Meta":
			if r.TryDecodeAsNil() {
				x.Meta = nil
			} else {
				yyv8 := &x.Meta
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecMapStringStringX(yyv8, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv10 := &x.Region
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobDispatchRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv13 := &x.JobID
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Payload = nil
	} else {
		yyv15 := &x.Payload
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*yyv15 = r.DecodeBytes(*(*[]byte)(yyv15), false, false)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Meta = nil
	} else {
		yyv17 := &x.Meta
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			z.F.DecMapStringStringX(yyv17, false, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv19 := &x.Region
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobValidateRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobValidateRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobValidateRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv5 := &x.Region
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobValidateRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv9 := &x.Region
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobValidateResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.DriverConfigValidated))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DriverConfigValidated"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.DriverConfigValidated))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.ValidationErrors == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncSliceStringV(x.ValidationErrors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ValidationErrors"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.ValidationErrors == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncSliceStringV(x.ValidationErrors, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobValidateResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobValidateResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "DriverConfigValidated":
			if r.TryDecodeAsNil() {
				x.DriverConfigValidated = false
			} else {
				yyv4 := &x.DriverConfigValidated
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "ValidationErrors":
			if r.TryDecodeAsNil() {
				x.ValidationErrors = nil
			} else {
				yyv6 := &x.ValidationErrors
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecSliceStringX(yyv6, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobValidateResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DriverConfigValidated = false
	} else {
		yyv9 := &x.DriverConfigValidated
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*bool)(yyv9)) = r.DecodeBool()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ValidationErrors = nil
	} else {
		yyv11 := &x.ValidationErrors
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			z.F.DecSliceStringX(yyv11, false, d)
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NodeListRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NodeListRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NodeListRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv6 := &x.MinQueryIndex
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv8 := &x.MaxQueryTime
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv10 := &x.AllowStale
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv12 := &x.Prefix
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NodeListRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv15 := &x.Region
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv17 := &x.MinQueryIndex
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv19 := &x.MaxQueryTime
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv19) {
		} else {
			*((*int64)(yyv19)) = int64(r.DecodeInt(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv21 := &x.AllowStale
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv23 := &x.Prefix
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *EvalUpdateRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evals), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Evals"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evals), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *EvalUpdateRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *EvalUpdateRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Evals":
			if r.TryDecodeAsNil() {
				x.Evals = nil
			} else {
				yyv4 := &x.Evals
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv4), d)
				}
			}
		case "EvalToken":
			if r.TryDecodeAsNil() {
				x.EvalToken = ""
			} else {
				yyv6 := &x.EvalToken
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *EvalUpdateRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Evals = nil
	} else {
		yyv11 := &x.Evals
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv11), d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalToken = ""
	} else {
		yyv13 := &x.EvalToken
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv15 := &x.Region
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *EvalDeleteRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.Evals, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Evals"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Evals == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.Evals, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncSliceStringV(x.Allocs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Allocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncSliceStringV(x.Allocs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *EvalDeleteRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *EvalDeleteRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Evals":
			if r.TryDecodeAsNil() {
				x.Evals = nil
			} else {
				yyv4 := &x.Evals
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "Allocs":
			if r.TryDecodeAsNil() {
				x.Allocs = nil
			} else {
				yyv6 := &x.Allocs
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecSliceStringX(yyv6, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *EvalDeleteRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Evals = nil
	} else {
		yyv11 := &x.Evals
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			z.F.DecSliceStringX(yyv11, false, d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Allocs = nil
	} else {
		yyv13 := &x.Allocs
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			z.F.DecSliceStringX(yyv13, false, d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv15 := &x.Region
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *EvalSpecificRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *EvalSpecificRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *EvalSpecificRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv4 := &x.EvalID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv8 := &x.MinQueryIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv10 := &x.MaxQueryTime
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv12 := &x.AllowStale
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv14 := &x.Prefix
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *EvalSpecificRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv17 := &x.EvalID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv19 := &x.Region
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv21 := &x.MinQueryIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv23 := &x.MaxQueryTime
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv23) {
		} else {
			*((*int64)(yyv23)) = int64(r.DecodeInt(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv25 := &x.AllowStale
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*bool)(yyv25)) = r.DecodeBool()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv27 := &x.Prefix
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *EvalAckRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Token))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Token"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Token))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *EvalAckRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *EvalAckRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv4 := &x.EvalID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Token":
			if r.TryDecodeAsNil() {
				x.Token = ""
			} else {
				yyv6 := &x.Token
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv8 := &x.Region
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *EvalAckRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv11 := &x.EvalID
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Token = ""
	} else {
		yyv13 := &x.Token
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv15 := &x.Region
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *EvalDequeueRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Schedulers == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.Schedulers, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Schedulers"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Schedulers == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.Schedulers, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Timeout) {
				} else {
					r.EncodeInt(int64(x.Timeout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Timeout"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Timeout) {
				} else {
					r.EncodeInt(int64(x.Timeout))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.SchedulerVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("SchedulerVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.SchedulerVersion))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *EvalDequeueRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *EvalDequeueRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Schedulers":
			if r.TryDecodeAsNil() {
				x.Schedulers = nil
			} else {
				yyv4 := &x.Schedulers
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "Timeout":
			if r.TryDecodeAsNil() {
				x.Timeout = 0
			} else {
				yyv6 := &x.Timeout
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else {
					*((*int64)(yyv6)) = int64(r.DecodeInt(64))
				}
			}
		case "SchedulerVersion":
			if r.TryDecodeAsNil() {
				x.SchedulerVersion = 0
			} else {
				yyv8 := &x.SchedulerVersion
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint16)(yyv8)) = uint16(r.DecodeUint(16))
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv10 := &x.Region
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *EvalDequeueRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Schedulers = nil
	} else {
		yyv13 := &x.Schedulers
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			z.F.DecSliceStringX(yyv13, false, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Timeout = 0
	} else {
		yyv15 := &x.Timeout
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.SchedulerVersion = 0
	} else {
		yyv17 := &x.SchedulerVersion
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint16)(yyv17)) = uint16(r.DecodeUint(16))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv19 := &x.Region
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *EvalListRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *EvalListRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *EvalListRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv6 := &x.MinQueryIndex
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv8 := &x.MaxQueryTime
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv10 := &x.AllowStale
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv12 := &x.Prefix
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *EvalListRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv15 := &x.Region
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv17 := &x.MinQueryIndex
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv19 := &x.MaxQueryTime
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv19) {
		} else {
			*((*int64)(yyv19)) = int64(r.DecodeInt(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv21 := &x.AllowStale
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv23 := &x.Prefix
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *PlanRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Plan == nil {
					r.EncodeNil()
				} else {
					x.Plan.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Plan"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Plan == nil {
					r.EncodeNil()
				} else {
					x.Plan.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *PlanRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *PlanRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Plan":
			if r.TryDecodeAsNil() {
				if x.Plan != nil {
					x.Plan = nil
				}
			} else {
				if x.Plan == nil {
					x.Plan = new(Plan)
				}
				x.Plan.CodecDecodeSelf(d)
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv5 := &x.Region
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *PlanRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Plan != nil {
			x.Plan = nil
		}
	} else {
		if x.Plan == nil {
			x.Plan = new(Plan)
		}
		x.Plan.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv9 := &x.Region
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *AllocUpdateRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Alloc == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.Alloc), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Alloc"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Alloc == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.Alloc), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *AllocUpdateRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *AllocUpdateRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Alloc":
			if r.TryDecodeAsNil() {
				x.Alloc = nil
			} else {
				yyv4 := &x.Alloc
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocation((*[]*Allocation)(yyv4), d)
				}
			}
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv7 := &x.Region
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*string)(yyv7)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *AllocUpdateRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Alloc = nil
	} else {
		yyv10 := &x.Alloc
		yym11 := z.DecBinary()
		_ = yym11
		if false {
		} else {
			h.decSlicePtrtoAllocation((*[]*Allocation)(yyv10), d)
		}
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv13 := &x.Region
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *AllocListRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *AllocListRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *AllocListRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv6 := &x.MinQueryIndex
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv8 := &x.MaxQueryTime
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv10 := &x.AllowStale
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv12 := &x.Prefix
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *AllocListRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv15 := &x.Region
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv17 := &x.MinQueryIndex
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv19 := &x.MaxQueryTime
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv19) {
		} else {
			*((*int64)(yyv19)) = int64(r.DecodeInt(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv21 := &x.AllowStale
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv23 := &x.Prefix
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *AllocSpecificRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.AllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.AllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *AllocSpecificRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *AllocSpecificRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "AllocID":
			if r.TryDecodeAsNil() {
				x.AllocID = ""
			} else {
				yyv4 := &x.AllocID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv8 := &x.MinQueryIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv10 := &x.MaxQueryTime
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv12 := &x.AllowStale
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv14 := &x.Prefix
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *AllocSpecificRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllocID = ""
	} else {
		yyv17 := &x.AllocID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv19 := &x.Region
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv21 := &x.MinQueryIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv23 := &x.MaxQueryTime
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv23) {
		} else {
			*((*int64)(yyv23)) = int64(r.DecodeInt(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv25 := &x.AllowStale
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*bool)(yyv25)) = r.DecodeBool()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv27 := &x.Prefix
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *AllocsGetRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.AllocIDs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.AllocIDs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllocIDs"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.AllocIDs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.AllocIDs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *AllocsGetRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *AllocsGetRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "AllocIDs":
			if r.TryDecodeAsNil() {
				x.AllocIDs = nil
			} else {
				yyv4 := &x.AllocIDs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv8 := &x.MinQueryIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv10 := &x.MaxQueryTime
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv12 := &x.AllowStale
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv14 := &x.Prefix
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *AllocsGetRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllocIDs = nil
	} else {
		yyv17 := &x.AllocIDs
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			z.F.DecSliceStringX(yyv17, false, d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv19 := &x.Region
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv21 := &x.MinQueryIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv23 := &x.MaxQueryTime
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv23) {
		} else {
			*((*int64)(yyv23)) = int64(r.DecodeInt(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv25 := &x.AllowStale
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*bool)(yyv25)) = r.DecodeBool()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv27 := &x.Prefix
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *PeriodicForceRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *PeriodicForceRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *PeriodicForceRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv6 := &x.Region
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *PeriodicForceRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv9 := &x.JobID
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv11 := &x.Region
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *ServerMembersResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ServerName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ServerName"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ServerName))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ServerRegion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ServerRegion"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ServerRegion))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ServerDC))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ServerDC"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ServerDC))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Members == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSlicePtrtoServerMember(([]*ServerMember)(x.Members), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Members"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Members == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSlicePtrtoServerMember(([]*ServerMember)(x.Members), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *ServerMembersResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *ServerMembersResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "ServerName":
			if r.TryDecodeAsNil() {
				x.ServerName = ""
			} else {
				yyv4 := &x.ServerName
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "ServerRegion":
			if r.TryDecodeAsNil() {
				x.ServerRegion = ""
			} else {
				yyv6 := &x.ServerRegion
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "ServerDC":
			if r.TryDecodeAsNil() {
				x.ServerDC = ""
			} else {
				yyv8 := &x.ServerDC
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Members":
			if r.TryDecodeAsNil() {
				x.Members = nil
			} else {
				yyv10 := &x.Members
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					h.decSlicePtrtoServerMember((*[]*ServerMember)(yyv10), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *ServerMembersResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ServerName = ""
	} else {
		yyv13 := &x.ServerName
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ServerRegion = ""
	} else {
		yyv15 := &x.ServerRegion
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ServerDC = ""
	} else {
		yyv17 := &x.ServerDC
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Members = nil
	} else {
		yyv19 := &x.Members
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			h.decSlicePtrtoServerMember((*[]*ServerMember)(yyv19), d)
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *ServerMember) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [11]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(11)
			} else {
				yynn2 = 11
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Addr == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Addr) {
					} else if !yym7 {
						z.EncTextMarshal(x.Addr)
					} else {
						h.encnet_IP((net.IP)(x.Addr), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Addr"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Addr == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Addr) {
					} else if !yym8 {
						z.EncTextMarshal(x.Addr)
					} else {
						h.encnet_IP((net.IP)(x.Addr), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Port))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Tags == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncMapStringStringV(x.Tags, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Tags"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Tags == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncMapStringStringV(x.Tags, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.ProtocolMin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ProtocolMin"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.ProtocolMin))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeUint(uint64(x.ProtocolMax))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ProtocolMax"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeUint(uint64(x.ProtocolMax))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeUint(uint64(x.ProtocolCur))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ProtocolCur"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeUint(uint64(x.ProtocolCur))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeUint(uint64(x.DelegateMin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DelegateMin"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeUint(uint64(x.DelegateMin))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeUint(uint64(x.DelegateMax))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DelegateMax"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeUint(uint64(x.DelegateMax))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeUint(uint64(x.DelegateCur))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DelegateCur"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeUint(uint64(x.DelegateCur))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *ServerMember) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *ServerMember) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Addr":
			if r.TryDecodeAsNil() {
				x.Addr = nil
			} else {
				yyv6 := &x.Addr
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else if !yym7 {
					z.DecTextUnmarshal(yyv6)
				} else {
					h.decnet_IP((*net.IP)(yyv6), d)
				}
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				yyv8 := &x.Port
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint16)(yyv8)) = uint16(r.DecodeUint(16))
				}
			}
		case "Tags":
			if r.TryDecodeAsNil() {
				x.Tags = nil
			} else {
				yyv10 := &x.Tags
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecMapStringStringX(yyv10, false, d)
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv12 := &x.Status
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "ProtocolMin":
			if r.TryDecodeAsNil() {
				x.ProtocolMin = 0
			} else {
				yyv14 := &x.ProtocolMin
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*uint8)(yyv14)) = uint8(r.DecodeUint(8))
				}
			}
		case "ProtocolMax":
			if r.TryDecodeAsNil() {
				x.ProtocolMax = 0
			} else {
				yyv16 := &x.ProtocolMax
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*uint8)(yyv16)) = uint8(r.DecodeUint(8))
				}
			}
		case "ProtocolCur":
			if r.TryDecodeAsNil() {
				x.ProtocolCur = 0
			} else {
				yyv18 := &x.ProtocolCur
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*uint8)(yyv18)) = uint8(r.DecodeUint(8))
				}
			}
		case "DelegateMin":
			if r.TryDecodeAsNil() {
				x.DelegateMin = 0
			} else {
				yyv20 := &x.DelegateMin
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*uint8)(yyv20)) = uint8(r.DecodeUint(8))
				}
			}
		case "DelegateMax":
			if r.TryDecodeAsNil() {
				x.DelegateMax = 0
			} else {
				yyv22 := &x.DelegateMax
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*uint8)(yyv22)) = uint8(r.DecodeUint(8))
				}
			}
		case "DelegateCur":
			if r.TryDecodeAsNil() {
				x.DelegateCur = 0
			} else {
				yyv24 := &x.DelegateCur
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*uint8)(yyv24)) = uint8(r.DecodeUint(8))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *ServerMember) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv27 := &x.Name
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Addr = nil
	} else {
		yyv29 := &x.Addr
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv29) {
		} else if !yym30 {
			z.DecTextUnmarshal(yyv29)
		} else {
			h.decnet_IP((*net.IP)(yyv29), d)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		yyv31 := &x.Port
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*uint16)(yyv31)) = uint16(r.DecodeUint(16))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Tags = nil
	} else {
		yyv33 := &x.Tags
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			z.F.DecMapStringStringX(yyv33, false, d)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv35 := &x.Status
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ProtocolMin = 0
	} else {
		yyv37 := &x.ProtocolMin
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*uint8)(yyv37)) = uint8(r.DecodeUint(8))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ProtocolMax = 0
	} else {
		yyv39 := &x.ProtocolMax
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*uint8)(yyv39)) = uint8(r.DecodeUint(8))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ProtocolCur = 0
	} else {
		yyv41 := &x.ProtocolCur
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*uint8)(yyv41)) = uint8(r.DecodeUint(8))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DelegateMin = 0
	} else {
		yyv43 := &x.DelegateMin
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*uint8)(yyv43)) = uint8(r.DecodeUint(8))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DelegateMax = 0
	} else {
		yyv45 := &x.DelegateMax
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*uint8)(yyv45)) = uint8(r.DecodeUint(8))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DelegateCur = 0
	} else {
		yyv47 := &x.DelegateCur
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*uint8)(yyv47)) = uint8(r.DecodeUint(8))
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *DeriveVaultTokenRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.SecretID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("SecretID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.SecretID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.AllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.AllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncSliceStringV(x.Tasks, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Tasks"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncSliceStringV(x.Tasks, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *DeriveVaultTokenRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *DeriveVaultTokenRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv4 := &x.NodeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "SecretID":
			if r.TryDecodeAsNil() {
				x.SecretID = ""
			} else {
				yyv6 := &x.SecretID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "AllocID":
			if r.TryDecodeAsNil() {
				x.AllocID = ""
			} else {
				yyv8 := &x.AllocID
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Tasks":
			if r.TryDecodeAsNil() {
				x.Tasks = nil
			} else {
				yyv10 := &x.Tasks
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecSliceStringX(yyv10, false, d)
				}
			}
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv12 := &x.Region
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv14 := &x.MinQueryIndex
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*uint64)(yyv14)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv16 := &x.MaxQueryTime
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv16) {
				} else {
					*((*int64)(yyv16)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv18 := &x.AllowStale
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv20 := &x.Prefix
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *DeriveVaultTokenRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv23 := &x.NodeID
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.SecretID = ""
	} else {
		yyv25 := &x.SecretID
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllocID = ""
	} else {
		yyv27 := &x.AllocID
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Tasks = nil
	} else {
		yyv29 := &x.Tasks
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			z.F.DecSliceStringX(yyv29, false, d)
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv31 := &x.Region
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv33 := &x.MinQueryIndex
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*uint64)(yyv33)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv35 := &x.MaxQueryTime
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv35) {
		} else {
			*((*int64)(yyv35)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv37 := &x.AllowStale
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*bool)(yyv37)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv39 := &x.Prefix
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *VaultAccessorsRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Accessors == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoVaultAccessor(([]*VaultAccessor)(x.Accessors), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Accessors"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Accessors == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoVaultAccessor(([]*VaultAccessor)(x.Accessors), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *VaultAccessorsRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *VaultAccessorsRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Accessors":
			if r.TryDecodeAsNil() {
				x.Accessors = nil
			} else {
				yyv4 := &x.Accessors
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoVaultAccessor((*[]*VaultAccessor)(yyv4), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *VaultAccessorsRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Accessors = nil
	} else {
		yyv7 := &x.Accessors
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			h.decSlicePtrtoVaultAccessor((*[]*VaultAccessor)(yyv7), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *VaultAccessor) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.AllocID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllocID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.AllocID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Task))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Task"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Task))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Accessor))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Accessor"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Accessor))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.CreationTTL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CreationTTL"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeInt(int64(x.CreationTTL))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *VaultAccessor) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *VaultAccessor) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "AllocID":
			if r.TryDecodeAsNil() {
				x.AllocID = ""
			} else {
				yyv4 := &x.AllocID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Task":
			if r.TryDecodeAsNil() {
				x.Task = ""
			} else {
				yyv6 := &x.Task
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv8 := &x.NodeID
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Accessor":
			if r.TryDecodeAsNil() {
				x.Accessor = ""
			} else {
				yyv10 := &x.Accessor
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "CreationTTL":
			if r.TryDecodeAsNil() {
				x.CreationTTL = 0
			} else {
				yyv12 := &x.CreationTTL
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*int)(yyv12)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv14 := &x.CreateIndex
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*uint64)(yyv14)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *VaultAccessor) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllocID = ""
	} else {
		yyv17 := &x.AllocID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Task = ""
	} else {
		yyv19 := &x.Task
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv21 := &x.NodeID
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Accessor = ""
	} else {
		yyv23 := &x.Accessor
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CreationTTL = 0
	} else {
		yyv25 := &x.CreationTTL
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*int)(yyv25)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv27 := &x.CreateIndex
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*uint64)(yyv27)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *DeriveVaultTokenResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncMapStringStringV(x.Tasks, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Tasks"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncMapStringStringV(x.Tasks, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Error == nil {
					r.EncodeNil()
				} else {
					x.Error.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Error"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Error == nil {
					r.EncodeNil()
				} else {
					x.Error.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *DeriveVaultTokenResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *DeriveVaultTokenResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Tasks":
			if r.TryDecodeAsNil() {
				x.Tasks = nil
			} else {
				yyv4 := &x.Tasks
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4, false, d)
				}
			}
		case "Error":
			if r.TryDecodeAsNil() {
				if x.Error != nil {
					x.Error = nil
				}
			} else {
				if x.Error == nil {
					x.Error = new(RecoverableError)
				}
				x.Error.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv7 := &x.Index
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv9 := &x.LastContact
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv9) {
				} else {
					*((*int64)(yyv9)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv11 := &x.KnownLeader
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*bool)(yyv11)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *DeriveVaultTokenResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Tasks = nil
	} else {
		yyv14 := &x.Tasks
		yym15 := z.DecBinary()
		_ = yym15
		if false {
		} else {
			z.F.DecMapStringStringX(yyv14, false, d)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Error != nil {
			x.Error = nil
		}
	} else {
		if x.Error == nil {
			x.Error = new(RecoverableError)
		}
		x.Error.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv17 := &x.Index
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv19 := &x.LastContact
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv19) {
		} else {
			*((*int64)(yyv19)) = int64(r.DecodeInt(64))
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv21 := &x.KnownLeader
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *GenericRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MinQueryIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.MinQueryIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxQueryTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.MaxQueryTime) {
				} else {
					r.EncodeInt(int64(x.MaxQueryTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllowStale"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.AllowStale))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Prefix"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Prefix))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *GenericRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *GenericRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "MinQueryIndex":
			if r.TryDecodeAsNil() {
				x.MinQueryIndex = 0
			} else {
				yyv6 := &x.MinQueryIndex
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "MaxQueryTime":
			if r.TryDecodeAsNil() {
				x.MaxQueryTime = 0
			} else {
				yyv8 := &x.MaxQueryTime
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "AllowStale":
			if r.TryDecodeAsNil() {
				x.AllowStale = false
			} else {
				yyv10 := &x.AllowStale
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		case "Prefix":
			if r.TryDecodeAsNil() {
				x.Prefix = ""
			} else {
				yyv12 := &x.Prefix
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *GenericRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv15 := &x.Region
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MinQueryIndex = 0
	} else {
		yyv17 := &x.MinQueryIndex
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxQueryTime = 0
	} else {
		yyv19 := &x.MaxQueryTime
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv19) {
		} else {
			*((*int64)(yyv19)) = int64(r.DecodeInt(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllowStale = false
	} else {
		yyv21 := &x.AllowStale
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Prefix = ""
	} else {
		yyv23 := &x.Prefix
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *GenericResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *GenericResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *GenericResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv4 := &x.Index
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *GenericResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv7 := &x.Index
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *VersionResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Build))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Build"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Build))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Versions == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncMapStringIntV(x.Versions, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Versions"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Versions == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncMapStringIntV(x.Versions, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *VersionResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *VersionResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Build":
			if r.TryDecodeAsNil() {
				x.Build = ""
			} else {
				yyv4 := &x.Build
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv6 := &x.Versions
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecMapStringIntX(yyv6, false, d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv8 := &x.Index
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv10 := &x.LastContact
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv10) {
				} else {
					*((*int64)(yyv10)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv12 := &x.KnownLeader
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *VersionResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Build = ""
	} else {
		yyv15 := &x.Build
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv17 := &x.Versions
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			z.F.DecMapStringIntX(yyv17, false, d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv19 := &x.Index
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv21 := &x.LastContact
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv21) {
		} else {
			*((*int64)(yyv21)) = int64(r.DecodeInt(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv23 := &x.KnownLeader
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*bool)(yyv23)) = r.DecodeBool()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobRegisterResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobRegisterResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobRegisterResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv4 := &x.EvalID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalCreateIndex":
			if r.TryDecodeAsNil() {
				x.EvalCreateIndex = 0
			} else {
				yyv6 := &x.EvalCreateIndex
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv8 := &x.JobModifyIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv10 := &x.Index
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv12 := &x.LastContact
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv14 := &x.KnownLeader
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobRegisterResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv17 := &x.EvalID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalCreateIndex = 0
	} else {
		yyv19 := &x.EvalCreateIndex
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv21 := &x.JobModifyIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv23 := &x.Index
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv25 := &x.LastContact
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv25) {
		} else {
			*((*int64)(yyv25)) = int64(r.DecodeInt(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv27 := &x.KnownLeader
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*bool)(yyv27)) = r.DecodeBool()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobDeregisterResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobDeregisterResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobDeregisterResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv4 := &x.EvalID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalCreateIndex":
			if r.TryDecodeAsNil() {
				x.EvalCreateIndex = 0
			} else {
				yyv6 := &x.EvalCreateIndex
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv8 := &x.JobModifyIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv10 := &x.Index
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv12 := &x.LastContact
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv14 := &x.KnownLeader
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobDeregisterResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv17 := &x.EvalID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalCreateIndex = 0
	} else {
		yyv19 := &x.EvalCreateIndex
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv21 := &x.JobModifyIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv23 := &x.Index
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv25 := &x.LastContact
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv25) {
		} else {
			*((*int64)(yyv25)) = int64(r.DecodeInt(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv27 := &x.KnownLeader
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*bool)(yyv27)) = r.DecodeBool()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NodeUpdateResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [10]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(10)
			} else {
				yynn2 = 10
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.HeartbeatTTL) {
				} else {
					r.EncodeInt(int64(x.HeartbeatTTL))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("HeartbeatTTL"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.HeartbeatTTL) {
				} else {
					r.EncodeInt(int64(x.HeartbeatTTL))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.EvalIDs == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncSliceStringV(x.EvalIDs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalIDs"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.EvalIDs == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncSliceStringV(x.EvalIDs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.NodeModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.NodeModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.LeaderRPCAddr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LeaderRPCAddr"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.LeaderRPCAddr))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.NumNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NumNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.NumNodes))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Servers == nil {
					r.EncodeNil()
				} else {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						h.encSlicePtrtoNodeServerInfo(([]*NodeServerInfo)(x.Servers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Servers"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Servers == nil {
					r.EncodeNil()
				} else {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						h.encSlicePtrtoNodeServerInfo(([]*NodeServerInfo)(x.Servers), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NodeUpdateResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NodeUpdateResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "HeartbeatTTL":
			if r.TryDecodeAsNil() {
				x.HeartbeatTTL = 0
			} else {
				yyv4 := &x.HeartbeatTTL
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "EvalIDs":
			if r.TryDecodeAsNil() {
				x.EvalIDs = nil
			} else {
				yyv6 := &x.EvalIDs
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecSliceStringX(yyv6, false, d)
				}
			}
		case "EvalCreateIndex":
			if r.TryDecodeAsNil() {
				x.EvalCreateIndex = 0
			} else {
				yyv8 := &x.EvalCreateIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "NodeModifyIndex":
			if r.TryDecodeAsNil() {
				x.NodeModifyIndex = 0
			} else {
				yyv10 := &x.NodeModifyIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "LeaderRPCAddr":
			if r.TryDecodeAsNil() {
				x.LeaderRPCAddr = ""
			} else {
				yyv12 := &x.LeaderRPCAddr
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "NumNodes":
			if r.TryDecodeAsNil() {
				x.NumNodes = 0
			} else {
				yyv14 := &x.NumNodes
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int32)(yyv14)) = int32(r.DecodeInt(32))
				}
			}
		case "Servers":
			if r.TryDecodeAsNil() {
				x.Servers = nil
			} else {
				yyv16 := &x.Servers
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					h.decSlicePtrtoNodeServerInfo((*[]*NodeServerInfo)(yyv16), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv18 := &x.Index
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*uint64)(yyv18)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv20 := &x.LastContact
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv20) {
				} else {
					*((*int64)(yyv20)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv22 := &x.KnownLeader
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*bool)(yyv22)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NodeUpdateResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj24 int
	var yyb24 bool
	var yyhl24 bool = l >= 0
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.HeartbeatTTL = 0
	} else {
		yyv25 := &x.HeartbeatTTL
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv25) {
		} else {
			*((*int64)(yyv25)) = int64(r.DecodeInt(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalIDs = nil
	} else {
		yyv27 := &x.EvalIDs
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			z.F.DecSliceStringX(yyv27, false, d)
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalCreateIndex = 0
	} else {
		yyv29 := &x.EvalCreateIndex
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*uint64)(yyv29)) = uint64(r.DecodeUint(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeModifyIndex = 0
	} else {
		yyv31 := &x.NodeModifyIndex
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*uint64)(yyv31)) = uint64(r.DecodeUint(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LeaderRPCAddr = ""
	} else {
		yyv33 := &x.LeaderRPCAddr
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NumNodes = 0
	} else {
		yyv35 := &x.NumNodes
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*int32)(yyv35)) = int32(r.DecodeInt(32))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Servers = nil
	} else {
		yyv37 := &x.Servers
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			h.decSlicePtrtoNodeServerInfo((*[]*NodeServerInfo)(yyv37), d)
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv39 := &x.Index
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*uint64)(yyv39)) = uint64(r.DecodeUint(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv41 := &x.LastContact
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv41) {
		} else {
			*((*int64)(yyv41)) = int64(r.DecodeInt(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv43 := &x.KnownLeader
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*bool)(yyv43)) = r.DecodeBool()
		}
	}
	for {
		yyj24++
		if yyhl24 {
			yyb24 = yyj24 > l
		} else {
			yyb24 = r.CheckBreak()
		}
		if yyb24 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj24-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NodeDrainUpdateResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.EvalIDs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.EvalIDs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalIDs"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.EvalIDs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.EvalIDs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.NodeModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.NodeModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NodeDrainUpdateResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NodeDrainUpdateResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "EvalIDs":
			if r.TryDecodeAsNil() {
				x.EvalIDs = nil
			} else {
				yyv4 := &x.EvalIDs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "EvalCreateIndex":
			if r.TryDecodeAsNil() {
				x.EvalCreateIndex = 0
			} else {
				yyv6 := &x.EvalCreateIndex
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "NodeModifyIndex":
			if r.TryDecodeAsNil() {
				x.NodeModifyIndex = 0
			} else {
				yyv8 := &x.NodeModifyIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv10 := &x.Index
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv12 := &x.LastContact
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv12) {
				} else {
					*((*int64)(yyv12)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv14 := &x.KnownLeader
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NodeDrainUpdateResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalIDs = nil
	} else {
		yyv17 := &x.EvalIDs
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			z.F.DecSliceStringX(yyv17, false, d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalCreateIndex = 0
	} else {
		yyv19 := &x.EvalCreateIndex
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeModifyIndex = 0
	} else {
		yyv21 := &x.NodeModifyIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv23 := &x.Index
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv25 := &x.LastContact
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv25) {
		} else {
			*((*int64)(yyv25)) = int64(r.DecodeInt(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv27 := &x.KnownLeader
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*bool)(yyv27)) = r.DecodeBool()
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NodeAllocsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.Allocs), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Allocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.Allocs), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NodeAllocsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NodeAllocsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Allocs":
			if r.TryDecodeAsNil() {
				x.Allocs = nil
			} else {
				yyv4 := &x.Allocs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocation((*[]*Allocation)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NodeAllocsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Allocs = nil
	} else {
		yyv13 := &x.Allocs
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoAllocation((*[]*Allocation)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NodeClientAllocsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncMapStringUint64V(x.Allocs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Allocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncMapStringUint64V(x.Allocs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NodeClientAllocsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NodeClientAllocsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Allocs":
			if r.TryDecodeAsNil() {
				x.Allocs = nil
			} else {
				yyv4 := &x.Allocs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecMapStringUint64X(yyv4, false, d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NodeClientAllocsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Allocs = nil
	} else {
		yyv13 := &x.Allocs
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			z.F.DecMapStringUint64X(yyv13, false, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *SingleNodeResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Node == nil {
					r.EncodeNil()
				} else {
					x.Node.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Node"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Node == nil {
					r.EncodeNil()
				} else {
					x.Node.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *SingleNodeResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *SingleNodeResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Node":
			if r.TryDecodeAsNil() {
				if x.Node != nil {
					x.Node = nil
				}
			} else {
				if x.Node == nil {
					x.Node = new(Node)
				}
				x.Node.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *SingleNodeResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Node != nil {
			x.Node = nil
		}
	} else {
		if x.Node == nil {
			x.Node = new(Node)
		}
		x.Node.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NodeListResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Nodes == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoNodeListStub(([]*NodeListStub)(x.Nodes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Nodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Nodes == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoNodeListStub(([]*NodeListStub)(x.Nodes), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NodeListResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NodeListResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Nodes":
			if r.TryDecodeAsNil() {
				x.Nodes = nil
			} else {
				yyv4 := &x.Nodes
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoNodeListStub((*[]*NodeListStub)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NodeListResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Nodes = nil
	} else {
		yyv13 := &x.Nodes
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoNodeListStub((*[]*NodeListStub)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *SingleJobResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *SingleJobResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *SingleJobResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *SingleJobResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobSummaryResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.JobSummary == nil {
					r.EncodeNil()
				} else {
					x.JobSummary.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobSummary"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.JobSummary == nil {
					r.EncodeNil()
				} else {
					x.JobSummary.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobSummaryResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobSummaryResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "JobSummary":
			if r.TryDecodeAsNil() {
				if x.JobSummary != nil {
					x.JobSummary = nil
				}
			} else {
				if x.JobSummary == nil {
					x.JobSummary = new(JobSummary)
				}
				x.JobSummary.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobSummaryResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.JobSummary != nil {
			x.JobSummary = nil
		}
	} else {
		if x.JobSummary == nil {
			x.JobSummary = new(JobSummary)
		}
		x.JobSummary.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobDispatchResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DispatchedJobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DispatchedJobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DispatchedJobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.JobCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.JobCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobDispatchResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobDispatchResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "DispatchedJobID":
			if r.TryDecodeAsNil() {
				x.DispatchedJobID = ""
			} else {
				yyv4 := &x.DispatchedJobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv6 := &x.EvalID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "EvalCreateIndex":
			if r.TryDecodeAsNil() {
				x.EvalCreateIndex = 0
			} else {
				yyv8 := &x.EvalCreateIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "JobCreateIndex":
			if r.TryDecodeAsNil() {
				x.JobCreateIndex = 0
			} else {
				yyv10 := &x.JobCreateIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv12 := &x.Index
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobDispatchResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DispatchedJobID = ""
	} else {
		yyv15 := &x.DispatchedJobID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv17 := &x.EvalID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalCreateIndex = 0
	} else {
		yyv19 := &x.EvalCreateIndex
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobCreateIndex = 0
	} else {
		yyv21 := &x.JobCreateIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv23 := &x.Index
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobListResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Jobs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoJobListStub(([]*JobListStub)(x.Jobs), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Jobs"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Jobs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoJobListStub(([]*JobListStub)(x.Jobs), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobListResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobListResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Jobs":
			if r.TryDecodeAsNil() {
				x.Jobs = nil
			} else {
				yyv4 := &x.Jobs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoJobListStub((*[]*JobListStub)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobListResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Jobs = nil
	} else {
		yyv13 := &x.Jobs
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoJobListStub((*[]*JobListStub)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobPlanResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Annotations == nil {
					r.EncodeNil()
				} else {
					x.Annotations.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Annotations"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Annotations == nil {
					r.EncodeNil()
				} else {
					x.Annotations.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.FailedTGAllocs == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encMapstringPtrtoAllocMetric((map[string]*AllocMetric)(x.FailedTGAllocs), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("FailedTGAllocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.FailedTGAllocs == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encMapstringPtrtoAllocMetric((map[string]*AllocMetric)(x.FailedTGAllocs), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.CreatedEvals == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.CreatedEvals), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CreatedEvals"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.CreatedEvals == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.CreatedEvals), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Diff == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Diff) {
					} else {
						z.EncFallback(x.Diff)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Diff"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Diff == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.Diff) {
					} else {
						z.EncFallback(x.Diff)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yy19 := &x.NextPeriodicLaunch
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if yym21 := z.TimeRtidIfBinc(); yym21 != 0 {
					r.EncodeBuiltin(yym21, yy19)
				} else if z.HasExtensions() && z.EncExt(yy19) {
				} else if yym20 {
					z.EncBinaryMarshal(yy19)
				} else if !yym20 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy19)
				} else {
					z.EncFallback(yy19)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NextPeriodicLaunch"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yy22 := &x.NextPeriodicLaunch
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else if yym24 := z.TimeRtidIfBinc(); yym24 != 0 {
					r.EncodeBuiltin(yym24, yy22)
				} else if z.HasExtensions() && z.EncExt(yy22) {
				} else if yym23 {
					z.EncBinaryMarshal(yy22)
				} else if !yym23 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy22)
				} else {
					z.EncFallback(yy22)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym27 := z.EncBinary()
				_ = yym27
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobPlanResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobPlanResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Annotations":
			if r.TryDecodeAsNil() {
				if x.Annotations != nil {
					x.Annotations = nil
				}
			} else {
				if x.Annotations == nil {
					x.Annotations = new(PlanAnnotations)
				}
				x.Annotations.CodecDecodeSelf(d)
			}
		case "FailedTGAllocs":
			if r.TryDecodeAsNil() {
				x.FailedTGAllocs = nil
			} else {
				yyv5 := &x.FailedTGAllocs
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					h.decMapstringPtrtoAllocMetric((*map[string]*AllocMetric)(yyv5), d)
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv7 := &x.JobModifyIndex
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
				}
			}
		case "CreatedEvals":
			if r.TryDecodeAsNil() {
				x.CreatedEvals = nil
			} else {
				yyv9 := &x.CreatedEvals
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv9), d)
				}
			}
		case "Diff":
			if r.TryDecodeAsNil() {
				if x.Diff != nil {
					x.Diff = nil
				}
			} else {
				if x.Diff == nil {
					x.Diff = new(JobDiff)
				}
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Diff) {
				} else {
					z.DecFallback(x.Diff, false)
				}
			}
		case "NextPeriodicLaunch":
			if r.TryDecodeAsNil() {
				x.NextPeriodicLaunch = time.Time{}
			} else {
				yyv13 := &x.NextPeriodicLaunch
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else if yym15 := z.TimeRtidIfBinc(); yym15 != 0 {
					r.DecodeBuiltin(yym15, yyv13)
				} else if z.HasExtensions() && z.DecExt(yyv13) {
				} else if yym14 {
					z.DecBinaryUnmarshal(yyv13)
				} else if !yym14 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv13)
				} else {
					z.DecFallback(yyv13, false)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv16 := &x.Index
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*uint64)(yyv16)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobPlanResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Annotations != nil {
			x.Annotations = nil
		}
	} else {
		if x.Annotations == nil {
			x.Annotations = new(PlanAnnotations)
		}
		x.Annotations.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.FailedTGAllocs = nil
	} else {
		yyv20 := &x.FailedTGAllocs
		yym21 := z.DecBinary()
		_ = yym21
		if false {
		} else {
			h.decMapstringPtrtoAllocMetric((*map[string]*AllocMetric)(yyv20), d)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv22 := &x.JobModifyIndex
		yym23 := z.DecBinary()
		_ = yym23
		if false {
		} else {
			*((*uint64)(yyv22)) = uint64(r.DecodeUint(64))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CreatedEvals = nil
	} else {
		yyv24 := &x.CreatedEvals
		yym25 := z.DecBinary()
		_ = yym25
		if false {
		} else {
			h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv24), d)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Diff != nil {
			x.Diff = nil
		}
	} else {
		if x.Diff == nil {
			x.Diff = new(JobDiff)
		}
		yym27 := z.DecBinary()
		_ = yym27
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Diff) {
		} else {
			z.DecFallback(x.Diff, false)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NextPeriodicLaunch = time.Time{}
	} else {
		yyv28 := &x.NextPeriodicLaunch
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else if yym30 := z.TimeRtidIfBinc(); yym30 != 0 {
			r.DecodeBuiltin(yym30, yyv28)
		} else if z.HasExtensions() && z.DecExt(yyv28) {
		} else if yym29 {
			z.DecBinaryUnmarshal(yyv28)
		} else if !yym29 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv28)
		} else {
			z.DecFallback(yyv28, false)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv31 := &x.Index
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*uint64)(yyv31)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *SingleAllocResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Alloc == nil {
					r.EncodeNil()
				} else {
					x.Alloc.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Alloc"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Alloc == nil {
					r.EncodeNil()
				} else {
					x.Alloc.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *SingleAllocResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *SingleAllocResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Alloc":
			if r.TryDecodeAsNil() {
				if x.Alloc != nil {
					x.Alloc = nil
				}
			} else {
				if x.Alloc == nil {
					x.Alloc = new(Allocation)
				}
				x.Alloc.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *SingleAllocResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Alloc != nil {
			x.Alloc = nil
		}
	} else {
		if x.Alloc == nil {
			x.Alloc = new(Allocation)
		}
		x.Alloc.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *AllocsGetResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.Allocs), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Allocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Allocs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoAllocation(([]*Allocation)(x.Allocs), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *AllocsGetResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *AllocsGetResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Allocs":
			if r.TryDecodeAsNil() {
				x.Allocs = nil
			} else {
				yyv4 := &x.Allocs
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocation((*[]*Allocation)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *AllocsGetResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Allocs = nil
	} else {
		yyv13 := &x.Allocs
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoAllocation((*[]*Allocation)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobAllocationsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Allocations == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoAllocListStub(([]*AllocListStub)(x.Allocations), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Allocations"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Allocations == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoAllocListStub(([]*AllocListStub)(x.Allocations), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobAllocationsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobAllocationsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Allocations":
			if r.TryDecodeAsNil() {
				x.Allocations = nil
			} else {
				yyv4 := &x.Allocations
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocListStub((*[]*AllocListStub)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobAllocationsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Allocations = nil
	} else {
		yyv13 := &x.Allocations
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoAllocListStub((*[]*AllocListStub)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobEvaluationsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Evaluations == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evaluations), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Evaluations"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Evaluations == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evaluations), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobEvaluationsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobEvaluationsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Evaluations":
			if r.TryDecodeAsNil() {
				x.Evaluations = nil
			} else {
				yyv4 := &x.Evaluations
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobEvaluationsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Evaluations = nil
	} else {
		yyv13 := &x.Evaluations
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *SingleEvalResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Eval == nil {
					r.EncodeNil()
				} else {
					x.Eval.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Eval"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Eval == nil {
					r.EncodeNil()
				} else {
					x.Eval.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *SingleEvalResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *SingleEvalResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Eval":
			if r.TryDecodeAsNil() {
				if x.Eval != nil {
					x.Eval = nil
				}
			} else {
				if x.Eval == nil {
					x.Eval = new(Evaluation)
				}
				x.Eval.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv7 := &x.LastContact
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv7) {
				} else {
					*((*int64)(yyv7)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv9 := &x.KnownLeader
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*bool)(yyv9)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *SingleEvalResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Eval != nil {
			x.Eval = nil
		}
	} else {
		if x.Eval == nil {
			x.Eval = new(Evaluation)
		}
		x.Eval.CodecDecodeSelf(d)
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv13 := &x.Index
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv15 := &x.LastContact
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = r.CheckBreak()
	}
	if yyb11 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv17 := &x.KnownLeader
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = r.CheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj11-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *EvalDequeueResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Eval == nil {
					r.EncodeNil()
				} else {
					x.Eval.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Eval"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Eval == nil {
					r.EncodeNil()
				} else {
					x.Eval.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Token))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Token"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Token))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *EvalDequeueResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *EvalDequeueResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Eval":
			if r.TryDecodeAsNil() {
				if x.Eval != nil {
					x.Eval = nil
				}
			} else {
				if x.Eval == nil {
					x.Eval = new(Evaluation)
				}
				x.Eval.CodecDecodeSelf(d)
			}
		case "Token":
			if r.TryDecodeAsNil() {
				x.Token = ""
			} else {
				yyv5 := &x.Token
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv7 := &x.Index
				yym8 := z.DecBinary()
				_ = yym8
				if false {
				} else {
					*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv9 := &x.LastContact
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv9) {
				} else {
					*((*int64)(yyv9)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv11 := &x.KnownLeader
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*bool)(yyv11)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *EvalDequeueResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Eval != nil {
			x.Eval = nil
		}
	} else {
		if x.Eval == nil {
			x.Eval = new(Evaluation)
		}
		x.Eval.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Token = ""
	} else {
		yyv15 := &x.Token
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv17 := &x.Index
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv19 := &x.LastContact
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv19) {
		} else {
			*((*int64)(yyv19)) = int64(r.DecodeInt(64))
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv21 := &x.KnownLeader
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *PlanResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Result == nil {
					r.EncodeNil()
				} else {
					x.Result.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Result"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Result == nil {
					r.EncodeNil()
				} else {
					x.Result.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *PlanResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *PlanResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Result":
			if r.TryDecodeAsNil() {
				if x.Result != nil {
					x.Result = nil
				}
			} else {
				if x.Result == nil {
					x.Result = new(PlanResult)
				}
				x.Result.CodecDecodeSelf(d)
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv5 := &x.Index
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*uint64)(yyv5)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *PlanResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Result != nil {
			x.Result = nil
		}
	} else {
		if x.Result == nil {
			x.Result = new(PlanResult)
		}
		x.Result.CodecDecodeSelf(d)
	}
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv9 := &x.Index
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*uint64)(yyv9)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *AllocListResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Allocations == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoAllocListStub(([]*AllocListStub)(x.Allocations), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Allocations"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Allocations == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoAllocListStub(([]*AllocListStub)(x.Allocations), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *AllocListResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *AllocListResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Allocations":
			if r.TryDecodeAsNil() {
				x.Allocations = nil
			} else {
				yyv4 := &x.Allocations
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocListStub((*[]*AllocListStub)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *AllocListResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Allocations = nil
	} else {
		yyv13 := &x.Allocations
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoAllocListStub((*[]*AllocListStub)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *EvalListResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Evaluations == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evaluations), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Evaluations"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Evaluations == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoEvaluation(([]*Evaluation)(x.Evaluations), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *EvalListResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *EvalListResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Evaluations":
			if r.TryDecodeAsNil() {
				x.Evaluations = nil
			} else {
				yyv4 := &x.Evaluations
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *EvalListResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Evaluations = nil
	} else {
		yyv13 := &x.Evaluations
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoEvaluation((*[]*Evaluation)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *EvalAllocationsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Allocations == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSlicePtrtoAllocListStub(([]*AllocListStub)(x.Allocations), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Allocations"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Allocations == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSlicePtrtoAllocListStub(([]*AllocListStub)(x.Allocations), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LastContact"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.LastContact) {
				} else {
					r.EncodeInt(int64(x.LastContact))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KnownLeader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.KnownLeader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *EvalAllocationsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *EvalAllocationsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Allocations":
			if r.TryDecodeAsNil() {
				x.Allocations = nil
			} else {
				yyv4 := &x.Allocations
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocListStub((*[]*AllocListStub)(yyv4), d)
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv6 := &x.Index
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "LastContact":
			if r.TryDecodeAsNil() {
				x.LastContact = 0
			} else {
				yyv8 := &x.LastContact
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "KnownLeader":
			if r.TryDecodeAsNil() {
				x.KnownLeader = false
			} else {
				yyv10 := &x.KnownLeader
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *EvalAllocationsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Allocations = nil
	} else {
		yyv13 := &x.Allocations
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSlicePtrtoAllocListStub((*[]*AllocListStub)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LastContact = 0
	} else {
		yyv17 := &x.LastContact
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KnownLeader = false
	} else {
		yyv19 := &x.KnownLeader
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*bool)(yyv19)) = r.DecodeBool()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *PeriodicForceResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalCreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.EvalCreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Index"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Index))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *PeriodicForceResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *PeriodicForceResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv4 := &x.EvalID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalCreateIndex":
			if r.TryDecodeAsNil() {
				x.EvalCreateIndex = 0
			} else {
				yyv6 := &x.EvalCreateIndex
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "Index":
			if r.TryDecodeAsNil() {
				x.Index = 0
			} else {
				yyv8 := &x.Index
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *PeriodicForceResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv11 := &x.EvalID
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalCreateIndex = 0
	} else {
		yyv13 := &x.EvalCreateIndex
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Index = 0
	} else {
		yyv15 := &x.Index
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [19]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(19)
			} else {
				yynn2 = 19
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.SecretID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("SecretID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.SecretID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Datacenter))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Datacenter"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Datacenter))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.HTTPAddr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("HTTPAddr"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.HTTPAddr))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeBool(bool(x.TLSEnabled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("TLSEnabled"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeBool(bool(x.TLSEnabled))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Attributes == nil {
					r.EncodeNil()
				} else {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						z.F.EncMapStringStringV(x.Attributes, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Attributes"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Attributes == nil {
					r.EncodeNil()
				} else {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						z.F.EncMapStringStringV(x.Attributes, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Resources == nil {
					r.EncodeNil()
				} else {
					x.Resources.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Resources"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Resources == nil {
					r.EncodeNil()
				} else {
					x.Resources.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Reserved == nil {
					r.EncodeNil()
				} else {
					x.Reserved.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Reserved"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Reserved == nil {
					r.EncodeNil()
				} else {
					x.Reserved.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Links == nil {
					r.EncodeNil()
				} else {
					yym31 := z.EncBinary()
					_ = yym31
					if false {
					} else {
						z.F.EncMapStringStringV(x.Links, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Links"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Links == nil {
					r.EncodeNil()
				} else {
					yym32 := z.EncBinary()
					_ = yym32
					if false {
					} else {
						z.F.EncMapStringStringV(x.Links, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Meta"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeClass))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeClass"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeClass))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ComputedClass))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ComputedClass"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ComputedClass))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym43 := z.EncBinary()
				_ = yym43
				if false {
				} else {
					r.EncodeBool(bool(x.Drain))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Drain"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym44 := z.EncBinary()
				_ = yym44
				if false {
				} else {
					r.EncodeBool(bool(x.Drain))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym46 := z.EncBinary()
				_ = yym46
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym47 := z.EncBinary()
				_ = yym47
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym49 := z.EncBinary()
				_ = yym49
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.StatusDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("StatusDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym50 := z.EncBinary()
				_ = yym50
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.StatusDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym52 := z.EncBinary()
				_ = yym52
				if false {
				} else {
					r.EncodeInt(int64(x.StatusUpdatedAt))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("StatusUpdatedAt"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym53 := z.EncBinary()
				_ = yym53
				if false {
				} else {
					r.EncodeInt(int64(x.StatusUpdatedAt))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym55 := z.EncBinary()
				_ = yym55
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym56 := z.EncBinary()
				_ = yym56
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym58 := z.EncBinary()
				_ = yym58
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym59 := z.EncBinary()
				_ = yym59
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "SecretID":
			if r.TryDecodeAsNil() {
				x.SecretID = ""
			} else {
				yyv6 := &x.SecretID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Datacenter":
			if r.TryDecodeAsNil() {
				x.Datacenter = ""
			} else {
				yyv8 := &x.Datacenter
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv10 := &x.Name
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "HTTPAddr":
			if r.TryDecodeAsNil() {
				x.HTTPAddr = ""
			} else {
				yyv12 := &x.HTTPAddr
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "TLSEnabled":
			if r.TryDecodeAsNil() {
				x.TLSEnabled = false
			} else {
				yyv14 := &x.TLSEnabled
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "Attributes":
			if r.TryDecodeAsNil() {
				x.Attributes = nil
			} else {
				yyv16 := &x.Attributes
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					z.F.DecMapStringStringX(yyv16, false, d)
				}
			}
		case "Resources":
			if r.TryDecodeAsNil() {
				if x.Resources != nil {
					x.Resources = nil
				}
			} else {
				if x.Resources == nil {
					x.Resources = new(Resources)
				}
				x.Resources.CodecDecodeSelf(d)
			}
		case "Reserved":
			if r.TryDecodeAsNil() {
				if x.Reserved != nil {
					x.Reserved = nil
				}
			} else {
				if x.Reserved == nil {
					x.Reserved = new(Resources)
				}
				x.Reserved.CodecDecodeSelf(d)
			}
		case "Links":
			if r.TryDecodeAsNil() {
				x.Links = nil
			} else {
				yyv20 := &x.Links
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					z.F.DecMapStringStringX(yyv20, false, d)
				}
			}
		case "Meta":
			if r.TryDecodeAsNil() {
				x.Meta = nil
			} else {
				yyv22 := &x.Meta
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					z.F.DecMapStringStringX(yyv22, false, d)
				}
			}
		case "NodeClass":
			if r.TryDecodeAsNil() {
				x.NodeClass = ""
			} else {
				yyv24 := &x.NodeClass
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*string)(yyv24)) = r.DecodeString()
				}
			}
		case "ComputedClass":
			if r.TryDecodeAsNil() {
				x.ComputedClass = ""
			} else {
				yyv26 := &x.ComputedClass
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*string)(yyv26)) = r.DecodeString()
				}
			}
		case "Drain":
			if r.TryDecodeAsNil() {
				x.Drain = false
			} else {
				yyv28 := &x.Drain
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*bool)(yyv28)) = r.DecodeBool()
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv30 := &x.Status
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					*((*string)(yyv30)) = r.DecodeString()
				}
			}
		case "StatusDescription":
			if r.TryDecodeAsNil() {
				x.StatusDescription = ""
			} else {
				yyv32 := &x.StatusDescription
				yym33 := z.DecBinary()
				_ = yym33
				if false {
				} else {
					*((*string)(yyv32)) = r.DecodeString()
				}
			}
		case "StatusUpdatedAt":
			if r.TryDecodeAsNil() {
				x.StatusUpdatedAt = 0
			} else {
				yyv34 := &x.StatusUpdatedAt
				yym35 := z.DecBinary()
				_ = yym35
				if false {
				} else {
					*((*int64)(yyv34)) = int64(r.DecodeInt(64))
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv36 := &x.CreateIndex
				yym37 := z.DecBinary()
				_ = yym37
				if false {
				} else {
					*((*uint64)(yyv36)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv38 := &x.ModifyIndex
				yym39 := z.DecBinary()
				_ = yym39
				if false {
				} else {
					*((*uint64)(yyv38)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj40 int
	var yyb40 bool
	var yyhl40 bool = l >= 0
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv41 := &x.ID
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.SecretID = ""
	} else {
		yyv43 := &x.SecretID
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*string)(yyv43)) = r.DecodeString()
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Datacenter = ""
	} else {
		yyv45 := &x.Datacenter
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*string)(yyv45)) = r.DecodeString()
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv47 := &x.Name
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*string)(yyv47)) = r.DecodeString()
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.HTTPAddr = ""
	} else {
		yyv49 := &x.HTTPAddr
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*string)(yyv49)) = r.DecodeString()
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.TLSEnabled = false
	} else {
		yyv51 := &x.TLSEnabled
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*bool)(yyv51)) = r.DecodeBool()
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Attributes = nil
	} else {
		yyv53 := &x.Attributes
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			z.F.DecMapStringStringX(yyv53, false, d)
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Resources != nil {
			x.Resources = nil
		}
	} else {
		if x.Resources == nil {
			x.Resources = new(Resources)
		}
		x.Resources.CodecDecodeSelf(d)
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Reserved != nil {
			x.Reserved = nil
		}
	} else {
		if x.Reserved == nil {
			x.Reserved = new(Resources)
		}
		x.Reserved.CodecDecodeSelf(d)
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Links = nil
	} else {
		yyv57 := &x.Links
		yym58 := z.DecBinary()
		_ = yym58
		if false {
		} else {
			z.F.DecMapStringStringX(yyv57, false, d)
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Meta = nil
	} else {
		yyv59 := &x.Meta
		yym60 := z.DecBinary()
		_ = yym60
		if false {
		} else {
			z.F.DecMapStringStringX(yyv59, false, d)
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeClass = ""
	} else {
		yyv61 := &x.NodeClass
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else {
			*((*string)(yyv61)) = r.DecodeString()
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ComputedClass = ""
	} else {
		yyv63 := &x.ComputedClass
		yym64 := z.DecBinary()
		_ = yym64
		if false {
		} else {
			*((*string)(yyv63)) = r.DecodeString()
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Drain = false
	} else {
		yyv65 := &x.Drain
		yym66 := z.DecBinary()
		_ = yym66
		if false {
		} else {
			*((*bool)(yyv65)) = r.DecodeBool()
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv67 := &x.Status
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else {
			*((*string)(yyv67)) = r.DecodeString()
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.StatusDescription = ""
	} else {
		yyv69 := &x.StatusDescription
		yym70 := z.DecBinary()
		_ = yym70
		if false {
		} else {
			*((*string)(yyv69)) = r.DecodeString()
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.StatusUpdatedAt = 0
	} else {
		yyv71 := &x.StatusUpdatedAt
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else {
			*((*int64)(yyv71)) = int64(r.DecodeInt(64))
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv73 := &x.CreateIndex
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else {
			*((*uint64)(yyv73)) = uint64(r.DecodeUint(64))
		}
	}
	yyj40++
	if yyhl40 {
		yyb40 = yyj40 > l
	} else {
		yyb40 = r.CheckBreak()
	}
	if yyb40 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv75 := &x.ModifyIndex
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*uint64)(yyv75)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj40++
		if yyhl40 {
			yyb40 = yyj40 > l
		} else {
			yyb40 = r.CheckBreak()
		}
		if yyb40 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj40-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NodeListStub) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Datacenter))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Datacenter"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Datacenter))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeClass))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeClass"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeClass))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Drain))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Drain"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Drain))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.StatusDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("StatusDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.StatusDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NodeListStub) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NodeListStub) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Datacenter":
			if r.TryDecodeAsNil() {
				x.Datacenter = ""
			} else {
				yyv6 := &x.Datacenter
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv8 := &x.Name
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "NodeClass":
			if r.TryDecodeAsNil() {
				x.NodeClass = ""
			} else {
				yyv10 := &x.NodeClass
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Drain":
			if r.TryDecodeAsNil() {
				x.Drain = false
			} else {
				yyv12 := &x.Drain
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv14 := &x.Status
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "StatusDescription":
			if r.TryDecodeAsNil() {
				x.StatusDescription = ""
			} else {
				yyv16 := &x.StatusDescription
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv18 := &x.CreateIndex
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*uint64)(yyv18)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv20 := &x.ModifyIndex
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*uint64)(yyv20)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NodeListStub) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv23 := &x.ID
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Datacenter = ""
	} else {
		yyv25 := &x.Datacenter
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv27 := &x.Name
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeClass = ""
	} else {
		yyv29 := &x.NodeClass
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Drain = false
	} else {
		yyv31 := &x.Drain
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*bool)(yyv31)) = r.DecodeBool()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv33 := &x.Status
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.StatusDescription = ""
	} else {
		yyv35 := &x.StatusDescription
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv37 := &x.CreateIndex
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*uint64)(yyv37)) = uint64(r.DecodeUint(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv39 := &x.ModifyIndex
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*uint64)(yyv39)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *Resources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.CPU))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CPU"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.CPU))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.MemoryMB))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MemoryMB"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.MemoryMB))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.DiskMB))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DiskMB"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.DiskMB))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeInt(int64(x.IOPS))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("IOPS"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeInt(int64(x.IOPS))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Networks == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encSlicePtrtoNetworkResource(([]*NetworkResource)(x.Networks), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Networks"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Networks == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encSlicePtrtoNetworkResource(([]*NetworkResource)(x.Networks), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *Resources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *Resources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "CPU":
			if r.TryDecodeAsNil() {
				x.CPU = 0
			} else {
				yyv4 := &x.CPU
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "MemoryMB":
			if r.TryDecodeAsNil() {
				x.MemoryMB = 0
			} else {
				yyv6 := &x.MemoryMB
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "DiskMB":
			if r.TryDecodeAsNil() {
				x.DiskMB = 0
			} else {
				yyv8 := &x.DiskMB
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int)(yyv8)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "IOPS":
			if r.TryDecodeAsNil() {
				x.IOPS = 0
			} else {
				yyv10 := &x.IOPS
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*int)(yyv10)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "Networks":
			if r.TryDecodeAsNil() {
				x.Networks = nil
			} else {
				yyv12 := &x.Networks
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					h.decSlicePtrtoNetworkResource((*[]*NetworkResource)(yyv12), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *Resources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CPU = 0
	} else {
		yyv15 := &x.CPU
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*int)(yyv15)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MemoryMB = 0
	} else {
		yyv17 := &x.MemoryMB
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*int)(yyv17)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DiskMB = 0
	} else {
		yyv19 := &x.DiskMB
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*int)(yyv19)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.IOPS = 0
	} else {
		yyv21 := &x.IOPS
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*int)(yyv21)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Networks = nil
	} else {
		yyv23 := &x.Networks
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			h.decSlicePtrtoNetworkResource((*[]*NetworkResource)(yyv23), d)
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *Port) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Label"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Value"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.Value))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *Port) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *Port) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv4 := &x.Label
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Value":
			if r.TryDecodeAsNil() {
				x.Value = 0
			} else {
				yyv6 := &x.Value
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *Port) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv9 := &x.Label
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Value = 0
	} else {
		yyv11 := &x.Value
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*int)(yyv11)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *NetworkResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Device))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Device"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Device))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.CIDR))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CIDR"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.CIDR))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.IP))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeInt(int64(x.MBits))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MBits"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeInt(int64(x.MBits))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.ReservedPorts == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encSlicePort(([]Port)(x.ReservedPorts), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ReservedPorts"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.ReservedPorts == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encSlicePort(([]Port)(x.ReservedPorts), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.DynamicPorts == nil {
					r.EncodeNil()
				} else {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						h.encSlicePort(([]Port)(x.DynamicPorts), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DynamicPorts"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.DynamicPorts == nil {
					r.EncodeNil()
				} else {
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						h.encSlicePort(([]Port)(x.DynamicPorts), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *NetworkResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *NetworkResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Device":
			if r.TryDecodeAsNil() {
				x.Device = ""
			} else {
				yyv4 := &x.Device
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "CIDR":
			if r.TryDecodeAsNil() {
				x.CIDR = ""
			} else {
				yyv6 := &x.CIDR
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				yyv8 := &x.IP
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "MBits":
			if r.TryDecodeAsNil() {
				x.MBits = 0
			} else {
				yyv10 := &x.MBits
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*int)(yyv10)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "ReservedPorts":
			if r.TryDecodeAsNil() {
				x.ReservedPorts = nil
			} else {
				yyv12 := &x.ReservedPorts
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					h.decSlicePort((*[]Port)(yyv12), d)
				}
			}
		case "DynamicPorts":
			if r.TryDecodeAsNil() {
				x.DynamicPorts = nil
			} else {
				yyv14 := &x.DynamicPorts
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					h.decSlicePort((*[]Port)(yyv14), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *NetworkResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Device = ""
	} else {
		yyv17 := &x.Device
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CIDR = ""
	} else {
		yyv19 := &x.CIDR
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		yyv21 := &x.IP
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MBits = 0
	} else {
		yyv23 := &x.MBits
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*int)(yyv23)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ReservedPorts = nil
	} else {
		yyv25 := &x.ReservedPorts
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			h.decSlicePort((*[]Port)(yyv25), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DynamicPorts = nil
	} else {
		yyv27 := &x.DynamicPorts
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			h.decSlicePort((*[]Port)(yyv27), d)
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [21]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(21)
			} else {
				yynn2 = 21
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Region"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Region))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ParentID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ParentID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ParentID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.Priority))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Priority"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.Priority))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeBool(bool(x.AllAtOnce))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllAtOnce"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeBool(bool(x.AllAtOnce))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Datacenters == nil {
					r.EncodeNil()
				} else {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						z.F.EncSliceStringV(x.Datacenters, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Datacenters"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Datacenters == nil {
					r.EncodeNil()
				} else {
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						z.F.EncSliceStringV(x.Datacenters, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Constraints == nil {
					r.EncodeNil()
				} else {
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else {
						h.encSlicePtrtoConstraint(([]*Constraint)(x.Constraints), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Constraints"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Constraints == nil {
					r.EncodeNil()
				} else {
					yym29 := z.EncBinary()
					_ = yym29
					if false {
					} else {
						h.encSlicePtrtoConstraint(([]*Constraint)(x.Constraints), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.TaskGroups == nil {
					r.EncodeNil()
				} else {
					yym31 := z.EncBinary()
					_ = yym31
					if false {
					} else {
						h.encSlicePtrtoTaskGroup(([]*TaskGroup)(x.TaskGroups), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("TaskGroups"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.TaskGroups == nil {
					r.EncodeNil()
				} else {
					yym32 := z.EncBinary()
					_ = yym32
					if false {
					} else {
						h.encSlicePtrtoTaskGroup(([]*TaskGroup)(x.TaskGroups), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yy34 := &x.Update
				yy34.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Update"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yy36 := &x.Update
				yy36.CodecEncodeSelf(e)
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Periodic == nil {
					r.EncodeNil()
				} else {
					x.Periodic.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Periodic"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Periodic == nil {
					r.EncodeNil()
				} else {
					x.Periodic.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.ParameterizedJob == nil {
					r.EncodeNil()
				} else {
					x.ParameterizedJob.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ParameterizedJob"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.ParameterizedJob == nil {
					r.EncodeNil()
				} else {
					x.ParameterizedJob.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					yym45 := z.EncBinary()
					_ = yym45
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW120, []byte(x.Payload))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Payload"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Payload == nil {
					r.EncodeNil()
				} else {
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW120, []byte(x.Payload))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym48 := z.EncBinary()
					_ = yym48
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Meta"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym49 := z.EncBinary()
					_ = yym49
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym51 := z.EncBinary()
				_ = yym51
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.VaultToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("VaultToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym52 := z.EncBinary()
				_ = yym52
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.VaultToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym54 := z.EncBinary()
				_ = yym54
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym55 := z.EncBinary()
				_ = yym55
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym57 := z.EncBinary()
				_ = yym57
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.StatusDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("StatusDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym58 := z.EncBinary()
				_ = yym58
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.StatusDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym60 := z.EncBinary()
				_ = yym60
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym61 := z.EncBinary()
				_ = yym61
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym63 := z.EncBinary()
				_ = yym63
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym64 := z.EncBinary()
				_ = yym64
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym66 := z.EncBinary()
				_ = yym66
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym67 := z.EncBinary()
				_ = yym67
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				yyv4 := &x.Region
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv6 := &x.ID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "ParentID":
			if r.TryDecodeAsNil() {
				x.ParentID = ""
			} else {
				yyv8 := &x.ParentID
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv10 := &x.Name
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv12 := &x.Type
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Priority":
			if r.TryDecodeAsNil() {
				x.Priority = 0
			} else {
				yyv14 := &x.Priority
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int)(yyv14)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "AllAtOnce":
			if r.TryDecodeAsNil() {
				x.AllAtOnce = false
			} else {
				yyv16 := &x.AllAtOnce
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "Datacenters":
			if r.TryDecodeAsNil() {
				x.Datacenters = nil
			} else {
				yyv18 := &x.Datacenters
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					z.F.DecSliceStringX(yyv18, false, d)
				}
			}
		case "Constraints":
			if r.TryDecodeAsNil() {
				x.Constraints = nil
			} else {
				yyv20 := &x.Constraints
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					h.decSlicePtrtoConstraint((*[]*Constraint)(yyv20), d)
				}
			}
		case "TaskGroups":
			if r.TryDecodeAsNil() {
				x.TaskGroups = nil
			} else {
				yyv22 := &x.TaskGroups
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					h.decSlicePtrtoTaskGroup((*[]*TaskGroup)(yyv22), d)
				}
			}
		case "Update":
			if r.TryDecodeAsNil() {
				x.Update = UpdateStrategy{}
			} else {
				yyv24 := &x.Update
				yyv24.CodecDecodeSelf(d)
			}
		case "Periodic":
			if r.TryDecodeAsNil() {
				if x.Periodic != nil {
					x.Periodic = nil
				}
			} else {
				if x.Periodic == nil {
					x.Periodic = new(PeriodicConfig)
				}
				x.Periodic.CodecDecodeSelf(d)
			}
		case "ParameterizedJob":
			if r.TryDecodeAsNil() {
				if x.ParameterizedJob != nil {
					x.ParameterizedJob = nil
				}
			} else {
				if x.ParameterizedJob == nil {
					x.ParameterizedJob = new(ParameterizedJobConfig)
				}
				x.ParameterizedJob.CodecDecodeSelf(d)
			}
		case "Payload":
			if r.TryDecodeAsNil() {
				x.Payload = nil
			} else {
				yyv27 := &x.Payload
				yym28 := z.DecBinary()
				_ = yym28
				if false {
				} else {
					*yyv27 = r.DecodeBytes(*(*[]byte)(yyv27), false, false)
				}
			}
		case "Meta":
			if r.TryDecodeAsNil() {
				x.Meta = nil
			} else {
				yyv29 := &x.Meta
				yym30 := z.DecBinary()
				_ = yym30
				if false {
				} else {
					z.F.DecMapStringStringX(yyv29, false, d)
				}
			}
		case "VaultToken":
			if r.TryDecodeAsNil() {
				x.VaultToken = ""
			} else {
				yyv31 := &x.VaultToken
				yym32 := z.DecBinary()
				_ = yym32
				if false {
				} else {
					*((*string)(yyv31)) = r.DecodeString()
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv33 := &x.Status
				yym34 := z.DecBinary()
				_ = yym34
				if false {
				} else {
					*((*string)(yyv33)) = r.DecodeString()
				}
			}
		case "StatusDescription":
			if r.TryDecodeAsNil() {
				x.StatusDescription = ""
			} else {
				yyv35 := &x.StatusDescription
				yym36 := z.DecBinary()
				_ = yym36
				if false {
				} else {
					*((*string)(yyv35)) = r.DecodeString()
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv37 := &x.CreateIndex
				yym38 := z.DecBinary()
				_ = yym38
				if false {
				} else {
					*((*uint64)(yyv37)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv39 := &x.ModifyIndex
				yym40 := z.DecBinary()
				_ = yym40
				if false {
				} else {
					*((*uint64)(yyv39)) = uint64(r.DecodeUint(64))
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv41 := &x.JobModifyIndex
				yym42 := z.DecBinary()
				_ = yym42
				if false {
				} else {
					*((*uint64)(yyv41)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj43 int
	var yyb43 bool
	var yyhl43 bool = l >= 0
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		yyv44 := &x.Region
		yym45 := z.DecBinary()
		_ = yym45
		if false {
		} else {
			*((*string)(yyv44)) = r.DecodeString()
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv46 := &x.ID
		yym47 := z.DecBinary()
		_ = yym47
		if false {
		} else {
			*((*string)(yyv46)) = r.DecodeString()
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ParentID = ""
	} else {
		yyv48 := &x.ParentID
		yym49 := z.DecBinary()
		_ = yym49
		if false {
		} else {
			*((*string)(yyv48)) = r.DecodeString()
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv50 := &x.Name
		yym51 := z.DecBinary()
		_ = yym51
		if false {
		} else {
			*((*string)(yyv50)) = r.DecodeString()
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv52 := &x.Type
		yym53 := z.DecBinary()
		_ = yym53
		if false {
		} else {
			*((*string)(yyv52)) = r.DecodeString()
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Priority = 0
	} else {
		yyv54 := &x.Priority
		yym55 := z.DecBinary()
		_ = yym55
		if false {
		} else {
			*((*int)(yyv54)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllAtOnce = false
	} else {
		yyv56 := &x.AllAtOnce
		yym57 := z.DecBinary()
		_ = yym57
		if false {
		} else {
			*((*bool)(yyv56)) = r.DecodeBool()
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Datacenters = nil
	} else {
		yyv58 := &x.Datacenters
		yym59 := z.DecBinary()
		_ = yym59
		if false {
		} else {
			z.F.DecSliceStringX(yyv58, false, d)
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Constraints = nil
	} else {
		yyv60 := &x.Constraints
		yym61 := z.DecBinary()
		_ = yym61
		if false {
		} else {
			h.decSlicePtrtoConstraint((*[]*Constraint)(yyv60), d)
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.TaskGroups = nil
	} else {
		yyv62 := &x.TaskGroups
		yym63 := z.DecBinary()
		_ = yym63
		if false {
		} else {
			h.decSlicePtrtoTaskGroup((*[]*TaskGroup)(yyv62), d)
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Update = UpdateStrategy{}
	} else {
		yyv64 := &x.Update
		yyv64.CodecDecodeSelf(d)
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Periodic != nil {
			x.Periodic = nil
		}
	} else {
		if x.Periodic == nil {
			x.Periodic = new(PeriodicConfig)
		}
		x.Periodic.CodecDecodeSelf(d)
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.ParameterizedJob != nil {
			x.ParameterizedJob = nil
		}
	} else {
		if x.ParameterizedJob == nil {
			x.ParameterizedJob = new(ParameterizedJobConfig)
		}
		x.ParameterizedJob.CodecDecodeSelf(d)
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Payload = nil
	} else {
		yyv67 := &x.Payload
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else {
			*yyv67 = r.DecodeBytes(*(*[]byte)(yyv67), false, false)
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Meta = nil
	} else {
		yyv69 := &x.Meta
		yym70 := z.DecBinary()
		_ = yym70
		if false {
		} else {
			z.F.DecMapStringStringX(yyv69, false, d)
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.VaultToken = ""
	} else {
		yyv71 := &x.VaultToken
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else {
			*((*string)(yyv71)) = r.DecodeString()
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv73 := &x.Status
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else {
			*((*string)(yyv73)) = r.DecodeString()
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.StatusDescription = ""
	} else {
		yyv75 := &x.StatusDescription
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*string)(yyv75)) = r.DecodeString()
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv77 := &x.CreateIndex
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			*((*uint64)(yyv77)) = uint64(r.DecodeUint(64))
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv79 := &x.ModifyIndex
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			*((*uint64)(yyv79)) = uint64(r.DecodeUint(64))
		}
	}
	yyj43++
	if yyhl43 {
		yyb43 = yyj43 > l
	} else {
		yyb43 = r.CheckBreak()
	}
	if yyb43 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv81 := &x.JobModifyIndex
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else {
			*((*uint64)(yyv81)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj43++
		if yyhl43 {
			yyb43 = yyj43 > l
		} else {
			yyb43 = r.CheckBreak()
		}
		if yyb43 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj43-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobListStub) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [11]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(11)
			} else {
				yynn2 = 11
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ParentID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ParentID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ParentID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Priority))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Priority"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeInt(int64(x.Priority))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.StatusDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("StatusDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.StatusDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.JobSummary == nil {
					r.EncodeNil()
				} else {
					x.JobSummary.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobSummary"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.JobSummary == nil {
					r.EncodeNil()
				} else {
					x.JobSummary.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobListStub) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobListStub) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "ParentID":
			if r.TryDecodeAsNil() {
				x.ParentID = ""
			} else {
				yyv6 := &x.ParentID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv8 := &x.Name
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv10 := &x.Type
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "Priority":
			if r.TryDecodeAsNil() {
				x.Priority = 0
			} else {
				yyv12 := &x.Priority
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*int)(yyv12)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv14 := &x.Status
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "StatusDescription":
			if r.TryDecodeAsNil() {
				x.StatusDescription = ""
			} else {
				yyv16 := &x.StatusDescription
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "JobSummary":
			if r.TryDecodeAsNil() {
				if x.JobSummary != nil {
					x.JobSummary = nil
				}
			} else {
				if x.JobSummary == nil {
					x.JobSummary = new(JobSummary)
				}
				x.JobSummary.CodecDecodeSelf(d)
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv19 := &x.CreateIndex
				yym20 := z.DecBinary()
				_ = yym20
				if false {
				} else {
					*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv21 := &x.ModifyIndex
				yym22 := z.DecBinary()
				_ = yym22
				if false {
				} else {
					*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv23 := &x.JobModifyIndex
				yym24 := z.DecBinary()
				_ = yym24
				if false {
				} else {
					*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobListStub) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj25 int
	var yyb25 bool
	var yyhl25 bool = l >= 0
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv26 := &x.ID
		yym27 := z.DecBinary()
		_ = yym27
		if false {
		} else {
			*((*string)(yyv26)) = r.DecodeString()
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ParentID = ""
	} else {
		yyv28 := &x.ParentID
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			*((*string)(yyv28)) = r.DecodeString()
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv30 := &x.Name
		yym31 := z.DecBinary()
		_ = yym31
		if false {
		} else {
			*((*string)(yyv30)) = r.DecodeString()
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv32 := &x.Type
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else {
			*((*string)(yyv32)) = r.DecodeString()
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Priority = 0
	} else {
		yyv34 := &x.Priority
		yym35 := z.DecBinary()
		_ = yym35
		if false {
		} else {
			*((*int)(yyv34)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv36 := &x.Status
		yym37 := z.DecBinary()
		_ = yym37
		if false {
		} else {
			*((*string)(yyv36)) = r.DecodeString()
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.StatusDescription = ""
	} else {
		yyv38 := &x.StatusDescription
		yym39 := z.DecBinary()
		_ = yym39
		if false {
		} else {
			*((*string)(yyv38)) = r.DecodeString()
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.JobSummary != nil {
			x.JobSummary = nil
		}
	} else {
		if x.JobSummary == nil {
			x.JobSummary = new(JobSummary)
		}
		x.JobSummary.CodecDecodeSelf(d)
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv41 := &x.CreateIndex
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*uint64)(yyv41)) = uint64(r.DecodeUint(64))
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv43 := &x.ModifyIndex
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*uint64)(yyv43)) = uint64(r.DecodeUint(64))
		}
	}
	yyj25++
	if yyhl25 {
		yyb25 = yyj25 > l
	} else {
		yyb25 = r.CheckBreak()
	}
	if yyb25 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv45 := &x.JobModifyIndex
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*uint64)(yyv45)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj25++
		if yyhl25 {
			yyb25 = yyj25 > l
		} else {
			yyb25 = r.CheckBreak()
		}
		if yyb25 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj25-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobSummary) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Summary == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encMapstringTaskGroupSummary((map[string]TaskGroupSummary)(x.Summary), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Summary"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Summary == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encMapstringTaskGroupSummary((map[string]TaskGroupSummary)(x.Summary), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Children == nil {
					r.EncodeNil()
				} else {
					x.Children.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Children"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Children == nil {
					r.EncodeNil()
				} else {
					x.Children.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobSummary) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobSummary) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv4 := &x.JobID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Summary":
			if r.TryDecodeAsNil() {
				x.Summary = nil
			} else {
				yyv6 := &x.Summary
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decMapstringTaskGroupSummary((*map[string]TaskGroupSummary)(yyv6), d)
				}
			}
		case "Children":
			if r.TryDecodeAsNil() {
				if x.Children != nil {
					x.Children = nil
				}
			} else {
				if x.Children == nil {
					x.Children = new(JobChildrenSummary)
				}
				x.Children.CodecDecodeSelf(d)
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv9 := &x.CreateIndex
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*uint64)(yyv9)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv11 := &x.ModifyIndex
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobSummary) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv14 := &x.JobID
		yym15 := z.DecBinary()
		_ = yym15
		if false {
		} else {
			*((*string)(yyv14)) = r.DecodeString()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Summary = nil
	} else {
		yyv16 := &x.Summary
		yym17 := z.DecBinary()
		_ = yym17
		if false {
		} else {
			h.decMapstringTaskGroupSummary((*map[string]TaskGroupSummary)(yyv16), d)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Children != nil {
			x.Children = nil
		}
	} else {
		if x.Children == nil {
			x.Children = new(JobChildrenSummary)
		}
		x.Children.CodecDecodeSelf(d)
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv19 := &x.CreateIndex
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv21 := &x.ModifyIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *JobChildrenSummary) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.Pending))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Pending"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.Pending))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.Running))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Running"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.Running))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.Dead))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Dead"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.Dead))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *JobChildrenSummary) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *JobChildrenSummary) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Pending":
			if r.TryDecodeAsNil() {
				x.Pending = 0
			} else {
				yyv4 := &x.Pending
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "Running":
			if r.TryDecodeAsNil() {
				x.Running = 0
			} else {
				yyv6 := &x.Running
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int64)(yyv6)) = int64(r.DecodeInt(64))
				}
			}
		case "Dead":
			if r.TryDecodeAsNil() {
				x.Dead = 0
			} else {
				yyv8 := &x.Dead
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *JobChildrenSummary) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Pending = 0
	} else {
		yyv11 := &x.Pending
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*int64)(yyv11)) = int64(r.DecodeInt(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Running = 0
	} else {
		yyv13 := &x.Running
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*int64)(yyv13)) = int64(r.DecodeInt(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Dead = 0
	} else {
		yyv15 := &x.Dead
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *TaskGroupSummary) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.Queued))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Queued"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.Queued))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.Complete))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Complete"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.Complete))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.Failed))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Failed"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.Failed))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeInt(int64(x.Running))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Running"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeInt(int64(x.Running))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Starting))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Starting"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeInt(int64(x.Starting))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.Lost))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Lost"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.Lost))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *TaskGroupSummary) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *TaskGroupSummary) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Queued":
			if r.TryDecodeAsNil() {
				x.Queued = 0
			} else {
				yyv4 := &x.Queued
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "Complete":
			if r.TryDecodeAsNil() {
				x.Complete = 0
			} else {
				yyv6 := &x.Complete
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "Failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				yyv8 := &x.Failed
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int)(yyv8)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "Running":
			if r.TryDecodeAsNil() {
				x.Running = 0
			} else {
				yyv10 := &x.Running
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*int)(yyv10)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "Starting":
			if r.TryDecodeAsNil() {
				x.Starting = 0
			} else {
				yyv12 := &x.Starting
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*int)(yyv12)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "Lost":
			if r.TryDecodeAsNil() {
				x.Lost = 0
			} else {
				yyv14 := &x.Lost
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int)(yyv14)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *TaskGroupSummary) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Queued = 0
	} else {
		yyv17 := &x.Queued
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*int)(yyv17)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Complete = 0
	} else {
		yyv19 := &x.Complete
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*int)(yyv19)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		yyv21 := &x.Failed
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*int)(yyv21)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Running = 0
	} else {
		yyv23 := &x.Running
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*int)(yyv23)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Starting = 0
	} else {
		yyv25 := &x.Starting
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*int)(yyv25)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Lost = 0
	} else {
		yyv27 := &x.Lost
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*int)(yyv27)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *UpdateStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Stagger) {
				} else {
					r.EncodeInt(int64(x.Stagger))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Stagger"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Stagger) {
				} else {
					r.EncodeInt(int64(x.Stagger))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.MaxParallel))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxParallel"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.MaxParallel))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *UpdateStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *UpdateStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Stagger":
			if r.TryDecodeAsNil() {
				x.Stagger = 0
			} else {
				yyv4 := &x.Stagger
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "MaxParallel":
			if r.TryDecodeAsNil() {
				x.MaxParallel = 0
			} else {
				yyv6 := &x.MaxParallel
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *UpdateStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Stagger = 0
	} else {
		yyv9 := &x.Stagger
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv9) {
		} else {
			*((*int64)(yyv9)) = int64(r.DecodeInt(64))
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxParallel = 0
	} else {
		yyv11 := &x.MaxParallel
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*int)(yyv11)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *PeriodicConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.Enabled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Enabled"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.Enabled))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Spec))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Spec"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Spec))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.SpecType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("SpecType"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.SpecType))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.ProhibitOverlap))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ProhibitOverlap"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.ProhibitOverlap))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.TimeZone))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("TimeZone"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.TimeZone))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *PeriodicConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *PeriodicConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Enabled":
			if r.TryDecodeAsNil() {
				x.Enabled = false
			} else {
				yyv4 := &x.Enabled
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "Spec":
			if r.TryDecodeAsNil() {
				x.Spec = ""
			} else {
				yyv6 := &x.Spec
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "SpecType":
			if r.TryDecodeAsNil() {
				x.SpecType = ""
			} else {
				yyv8 := &x.SpecType
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "ProhibitOverlap":
			if r.TryDecodeAsNil() {
				x.ProhibitOverlap = false
			} else {
				yyv10 := &x.ProhibitOverlap
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		case "TimeZone":
			if r.TryDecodeAsNil() {
				x.TimeZone = ""
			} else {
				yyv12 := &x.TimeZone
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *PeriodicConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Enabled = false
	} else {
		yyv15 := &x.Enabled
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*bool)(yyv15)) = r.DecodeBool()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Spec = ""
	} else {
		yyv17 := &x.Spec
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.SpecType = ""
	} else {
		yyv19 := &x.SpecType
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ProhibitOverlap = false
	} else {
		yyv21 := &x.ProhibitOverlap
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*bool)(yyv21)) = r.DecodeBool()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.TimeZone = ""
	} else {
		yyv23 := &x.TimeZone
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *PeriodicLaunch) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yy7 := &x.Launch
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if yym9 := z.TimeRtidIfBinc(); yym9 != 0 {
					r.EncodeBuiltin(yym9, yy7)
				} else if z.HasExtensions() && z.EncExt(yy7) {
				} else if yym8 {
					z.EncBinaryMarshal(yy7)
				} else if !yym8 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy7)
				} else {
					z.EncFallback(yy7)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Launch"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yy10 := &x.Launch
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if yym12 := z.TimeRtidIfBinc(); yym12 != 0 {
					r.EncodeBuiltin(yym12, yy10)
				} else if z.HasExtensions() && z.EncExt(yy10) {
				} else if yym11 {
					z.EncBinaryMarshal(yy10)
				} else if !yym11 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy10)
				} else {
					z.EncFallback(yy10)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym18 := z.EncBinary()
				_ = yym18
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *PeriodicLaunch) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *PeriodicLaunch) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Launch":
			if r.TryDecodeAsNil() {
				x.Launch = time.Time{}
			} else {
				yyv6 := &x.Launch
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if yym8 := z.TimeRtidIfBinc(); yym8 != 0 {
					r.DecodeBuiltin(yym8, yyv6)
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else if yym7 {
					z.DecBinaryUnmarshal(yyv6)
				} else if !yym7 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv6)
				} else {
					z.DecFallback(yyv6, false)
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv9 := &x.CreateIndex
				yym10 := z.DecBinary()
				_ = yym10
				if false {
				} else {
					*((*uint64)(yyv9)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv11 := &x.ModifyIndex
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *PeriodicLaunch) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj13 int
	var yyb13 bool
	var yyhl13 bool = l >= 0
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv14 := &x.ID
		yym15 := z.DecBinary()
		_ = yym15
		if false {
		} else {
			*((*string)(yyv14)) = r.DecodeString()
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Launch = time.Time{}
	} else {
		yyv16 := &x.Launch
		yym17 := z.DecBinary()
		_ = yym17
		if false {
		} else if yym18 := z.TimeRtidIfBinc(); yym18 != 0 {
			r.DecodeBuiltin(yym18, yyv16)
		} else if z.HasExtensions() && z.DecExt(yyv16) {
		} else if yym17 {
			z.DecBinaryUnmarshal(yyv16)
		} else if !yym17 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv16)
		} else {
			z.DecFallback(yyv16, false)
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv19 := &x.CreateIndex
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj13++
	if yyhl13 {
		yyb13 = yyj13 > l
	} else {
		yyb13 = r.CheckBreak()
	}
	if yyb13 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv21 := &x.ModifyIndex
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj13++
		if yyhl13 {
			yyb13 = yyj13 > l
		} else {
			yyb13 = r.CheckBreak()
		}
		if yyb13 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj13-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *ParameterizedJobConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Payload))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Payload"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Payload))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.MetaRequired == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncSliceStringV(x.MetaRequired, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MetaRequired"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.MetaRequired == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncSliceStringV(x.MetaRequired, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.MetaOptional == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						z.F.EncSliceStringV(x.MetaOptional, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MetaOptional"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.MetaOptional == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						z.F.EncSliceStringV(x.MetaOptional, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *ParameterizedJobConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *ParameterizedJobConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Payload":
			if r.TryDecodeAsNil() {
				x.Payload = ""
			} else {
				yyv4 := &x.Payload
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "MetaRequired":
			if r.TryDecodeAsNil() {
				x.MetaRequired = nil
			} else {
				yyv6 := &x.MetaRequired
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecSliceStringX(yyv6, false, d)
				}
			}
		case "MetaOptional":
			if r.TryDecodeAsNil() {
				x.MetaOptional = nil
			} else {
				yyv8 := &x.MetaOptional
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecSliceStringX(yyv8, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *ParameterizedJobConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Payload = ""
	} else {
		yyv11 := &x.Payload
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MetaRequired = nil
	} else {
		yyv13 := &x.MetaRequired
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			z.F.DecSliceStringX(yyv13, false, d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MetaOptional = nil
	} else {
		yyv15 := &x.MetaOptional
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			z.F.DecSliceStringX(yyv15, false, d)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *DispatchPayloadConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.File))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("File"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.File))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *DispatchPayloadConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *DispatchPayloadConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "File":
			if r.TryDecodeAsNil() {
				x.File = ""
			} else {
				yyv4 := &x.File
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *DispatchPayloadConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.File = ""
	} else {
		yyv7 := &x.File
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*string)(yyv7)) = r.DecodeString()
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.Attempts))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Attempts"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.Attempts))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Interval) {
				} else {
					r.EncodeInt(int64(x.Interval))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Interval"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Interval) {
				} else {
					r.EncodeInt(int64(x.Interval))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Delay) {
				} else {
					r.EncodeInt(int64(x.Delay))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Delay"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Delay) {
				} else {
					r.EncodeInt(int64(x.Delay))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Mode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Mode"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Mode))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *RestartPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Attempts":
			if r.TryDecodeAsNil() {
				x.Attempts = 0
			} else {
				yyv4 := &x.Attempts
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "Interval":
			if r.TryDecodeAsNil() {
				x.Interval = 0
			} else {
				yyv6 := &x.Interval
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else {
					*((*int64)(yyv6)) = int64(r.DecodeInt(64))
				}
			}
		case "Delay":
			if r.TryDecodeAsNil() {
				x.Delay = 0
			} else {
				yyv8 := &x.Delay
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv8) {
				} else {
					*((*int64)(yyv8)) = int64(r.DecodeInt(64))
				}
			}
		case "Mode":
			if r.TryDecodeAsNil() {
				x.Mode = ""
			} else {
				yyv10 := &x.Mode
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *RestartPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Attempts = 0
	} else {
		yyv13 := &x.Attempts
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*int)(yyv13)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Interval = 0
	} else {
		yyv15 := &x.Interval
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv15) {
		} else {
			*((*int64)(yyv15)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Delay = 0
	} else {
		yyv17 := &x.Delay
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv17) {
		} else {
			*((*int64)(yyv17)) = int64(r.DecodeInt(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Mode = ""
	} else {
		yyv19 := &x.Mode
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *TaskGroup) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.Count))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Count"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.Count))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Constraints == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encSlicePtrtoConstraint(([]*Constraint)(x.Constraints), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Constraints"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Constraints == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encSlicePtrtoConstraint(([]*Constraint)(x.Constraints), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.RestartPolicy == nil {
					r.EncodeNil()
				} else {
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("RestartPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.RestartPolicy == nil {
					r.EncodeNil()
				} else {
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encSlicePtrtoTask(([]*Task)(x.Tasks), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Tasks"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Tasks == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encSlicePtrtoTask(([]*Task)(x.Tasks), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.EphemeralDisk == nil {
					r.EncodeNil()
				} else {
					x.EphemeralDisk.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EphemeralDisk"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.EphemeralDisk == nil {
					r.EncodeNil()
				} else {
					x.EphemeralDisk.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Meta"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *TaskGroup) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *TaskGroup) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				yyv6 := &x.Count
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "Constraints":
			if r.TryDecodeAsNil() {
				x.Constraints = nil
			} else {
				yyv8 := &x.Constraints
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					h.decSlicePtrtoConstraint((*[]*Constraint)(yyv8), d)
				}
			}
		case "RestartPolicy":
			if r.TryDecodeAsNil() {
				if x.RestartPolicy != nil {
					x.RestartPolicy = nil
				}
			} else {
				if x.RestartPolicy == nil {
					x.RestartPolicy = new(RestartPolicy)
				}
				x.RestartPolicy.CodecDecodeSelf(d)
			}
		case "Tasks":
			if r.TryDecodeAsNil() {
				x.Tasks = nil
			} else {
				yyv11 := &x.Tasks
				yym12 := z.DecBinary()
				_ = yym12
				if false {
				} else {
					h.decSlicePtrtoTask((*[]*Task)(yyv11), d)
				}
			}
		case "EphemeralDisk":
			if r.TryDecodeAsNil() {
				if x.EphemeralDisk != nil {
					x.EphemeralDisk = nil
				}
			} else {
				if x.EphemeralDisk == nil {
					x.EphemeralDisk = new(EphemeralDisk)
				}
				x.EphemeralDisk.CodecDecodeSelf(d)
			}
		case "Meta":
			if r.TryDecodeAsNil() {
				x.Meta = nil
			} else {
				yyv14 := &x.Meta
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					z.F.DecMapStringStringX(yyv14, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *TaskGroup) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv17 := &x.Name
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		yyv19 := &x.Count
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*int)(yyv19)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Constraints = nil
	} else {
		yyv21 := &x.Constraints
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			h.decSlicePtrtoConstraint((*[]*Constraint)(yyv21), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.RestartPolicy != nil {
			x.RestartPolicy = nil
		}
	} else {
		if x.RestartPolicy == nil {
			x.RestartPolicy = new(RestartPolicy)
		}
		x.RestartPolicy.CodecDecodeSelf(d)
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Tasks = nil
	} else {
		yyv24 := &x.Tasks
		yym25 := z.DecBinary()
		_ = yym25
		if false {
		} else {
			h.decSlicePtrtoTask((*[]*Task)(yyv24), d)
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.EphemeralDisk != nil {
			x.EphemeralDisk = nil
		}
	} else {
		if x.EphemeralDisk == nil {
			x.EphemeralDisk = new(EphemeralDisk)
		}
		x.EphemeralDisk.CodecDecodeSelf(d)
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Meta = nil
	} else {
		yyv27 := &x.Meta
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			z.F.DecMapStringStringX(yyv27, false, d)
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *ServiceCheck) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [10]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(10)
			} else {
				yynn2 = 10
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Command))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Command))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Args == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncSliceStringV(x.Args, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Args"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Args == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncSliceStringV(x.Args, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Path))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Protocol))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Protocol))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.PortLabel))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("PortLabel"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.PortLabel))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Interval) {
				} else {
					r.EncodeInt(int64(x.Interval))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Interval"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Interval) {
				} else {
					r.EncodeInt(int64(x.Interval))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Timeout) {
				} else {
					r.EncodeInt(int64(x.Timeout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Timeout"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Timeout) {
				} else {
					r.EncodeInt(int64(x.Timeout))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.InitialStatus))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("InitialStatus"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.InitialStatus))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *ServiceCheck) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *ServiceCheck) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv6 := &x.Type
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = ""
			} else {
				yyv8 := &x.Command
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv10 := &x.Args
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecSliceStringX(yyv10, false, d)
				}
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				yyv12 := &x.Path
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				yyv14 := &x.Protocol
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "PortLabel":
			if r.TryDecodeAsNil() {
				x.PortLabel = ""
			} else {
				yyv16 := &x.PortLabel
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "Interval":
			if r.TryDecodeAsNil() {
				x.Interval = 0
			} else {
				yyv18 := &x.Interval
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv18) {
				} else {
					*((*int64)(yyv18)) = int64(r.DecodeInt(64))
				}
			}
		case "Timeout":
			if r.TryDecodeAsNil() {
				x.Timeout = 0
			} else {
				yyv20 := &x.Timeout
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv20) {
				} else {
					*((*int64)(yyv20)) = int64(r.DecodeInt(64))
				}
			}
		case "InitialStatus":
			if r.TryDecodeAsNil() {
				x.InitialStatus = ""
			} else {
				yyv22 := &x.InitialStatus
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*string)(yyv22)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *ServiceCheck) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj24 int
	var yyb24 bool
	var yyhl24 bool = l >= 0
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv25 := &x.Name
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv27 := &x.Type
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Command = ""
	} else {
		yyv29 := &x.Command
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv31 := &x.Args
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			z.F.DecSliceStringX(yyv31, false, d)
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		yyv33 := &x.Path
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		yyv35 := &x.Protocol
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.PortLabel = ""
	} else {
		yyv37 := &x.PortLabel
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Interval = 0
	} else {
		yyv39 := &x.Interval
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv39) {
		} else {
			*((*int64)(yyv39)) = int64(r.DecodeInt(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Timeout = 0
	} else {
		yyv41 := &x.Timeout
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv41) {
		} else {
			*((*int64)(yyv41)) = int64(r.DecodeInt(64))
		}
	}
	yyj24++
	if yyhl24 {
		yyb24 = yyj24 > l
	} else {
		yyb24 = r.CheckBreak()
	}
	if yyb24 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.InitialStatus = ""
	} else {
		yyv43 := &x.InitialStatus
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*string)(yyv43)) = r.DecodeString()
		}
	}
	for {
		yyj24++
		if yyhl24 {
			yyb24 = yyj24 > l
		} else {
			yyb24 = r.CheckBreak()
		}
		if yyb24 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj24-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.PortLabel))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("PortLabel"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.PortLabel))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Tags == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						z.F.EncSliceStringV(x.Tags, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Tags"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Tags == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						z.F.EncSliceStringV(x.Tags, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Checks == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSlicePtrtoServiceCheck(([]*ServiceCheck)(x.Checks), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Checks"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Checks == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSlicePtrtoServiceCheck(([]*ServiceCheck)(x.Checks), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "PortLabel":
			if r.TryDecodeAsNil() {
				x.PortLabel = ""
			} else {
				yyv6 := &x.PortLabel
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Tags":
			if r.TryDecodeAsNil() {
				x.Tags = nil
			} else {
				yyv8 := &x.Tags
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecSliceStringX(yyv8, false, d)
				}
			}
		case "Checks":
			if r.TryDecodeAsNil() {
				x.Checks = nil
			} else {
				yyv10 := &x.Checks
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					h.decSlicePtrtoServiceCheck((*[]*ServiceCheck)(yyv10), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv13 := &x.Name
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.PortLabel = ""
	} else {
		yyv15 := &x.PortLabel
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Tags = nil
	} else {
		yyv17 := &x.Tags
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			z.F.DecSliceStringX(yyv17, false, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Checks = nil
	} else {
		yyv19 := &x.Checks
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			h.decSlicePtrtoServiceCheck((*[]*ServiceCheck)(yyv19), d)
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *LogConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.MaxFiles))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxFiles"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.MaxFiles))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.MaxFileSizeMB))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("MaxFileSizeMB"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.MaxFileSizeMB))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *LogConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *LogConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "MaxFiles":
			if r.TryDecodeAsNil() {
				x.MaxFiles = 0
			} else {
				yyv4 := &x.MaxFiles
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "MaxFileSizeMB":
			if r.TryDecodeAsNil() {
				x.MaxFileSizeMB = 0
			} else {
				yyv6 := &x.MaxFileSizeMB
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *LogConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxFiles = 0
	} else {
		yyv9 := &x.MaxFiles
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*int)(yyv9)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.MaxFileSizeMB = 0
	} else {
		yyv11 := &x.MaxFileSizeMB
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*int)(yyv11)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *Task) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [16]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(16)
			} else {
				yynn2 = 16
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Driver))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.User))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("User"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.User))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Config == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncMapStringIntfV(x.Config, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Config"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Config == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncMapStringIntfV(x.Config, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Env == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						z.F.EncMapStringStringV(x.Env, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Env"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Env == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						z.F.EncMapStringStringV(x.Env, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Services == nil {
					r.EncodeNil()
				} else {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						h.encSlicePtrtoService(([]*Service)(x.Services), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Services"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Services == nil {
					r.EncodeNil()
				} else {
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						h.encSlicePtrtoService(([]*Service)(x.Services), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Vault == nil {
					r.EncodeNil()
				} else {
					x.Vault.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Vault"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Vault == nil {
					r.EncodeNil()
				} else {
					x.Vault.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Templates == nil {
					r.EncodeNil()
				} else {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						h.encSlicePtrtoTemplate(([]*Template)(x.Templates), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Templates"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Templates == nil {
					r.EncodeNil()
				} else {
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						h.encSlicePtrtoTemplate(([]*Template)(x.Templates), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Constraints == nil {
					r.EncodeNil()
				} else {
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else {
						h.encSlicePtrtoConstraint(([]*Constraint)(x.Constraints), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Constraints"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Constraints == nil {
					r.EncodeNil()
				} else {
					yym29 := z.EncBinary()
					_ = yym29
					if false {
					} else {
						h.encSlicePtrtoConstraint(([]*Constraint)(x.Constraints), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Resources == nil {
					r.EncodeNil()
				} else {
					x.Resources.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Resources"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Resources == nil {
					r.EncodeNil()
				} else {
					x.Resources.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.DispatchPayload == nil {
					r.EncodeNil()
				} else {
					x.DispatchPayload.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DispatchPayload"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.DispatchPayload == nil {
					r.EncodeNil()
				} else {
					x.DispatchPayload.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Meta"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Meta == nil {
					r.EncodeNil()
				} else {
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						z.F.EncMapStringStringV(x.Meta, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else if z.HasExtensions() && z.EncExt(x.KillTimeout) {
				} else {
					r.EncodeInt(int64(x.KillTimeout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KillTimeout"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else if z.HasExtensions() && z.EncExt(x.KillTimeout) {
				} else {
					r.EncodeInt(int64(x.KillTimeout))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.LogConfig == nil {
					r.EncodeNil()
				} else {
					x.LogConfig.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LogConfig"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.LogConfig == nil {
					r.EncodeNil()
				} else {
					x.LogConfig.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Artifacts == nil {
					r.EncodeNil()
				} else {
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						h.encSlicePtrtoTaskArtifact(([]*TaskArtifact)(x.Artifacts), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Artifacts"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Artifacts == nil {
					r.EncodeNil()
				} else {
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else {
						h.encSlicePtrtoTaskArtifact(([]*TaskArtifact)(x.Artifacts), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym49 := z.EncBinary()
				_ = yym49
				if false {
				} else {
					r.EncodeBool(bool(x.Leader))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Leader"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym50 := z.EncBinary()
				_ = yym50
				if false {
				} else {
					r.EncodeBool(bool(x.Leader))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *Task) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *Task) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv4 := &x.Name
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				yyv6 := &x.Driver
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "User":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				yyv8 := &x.User
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "Config":
			if r.TryDecodeAsNil() {
				x.Config = nil
			} else {
				yyv10 := &x.Config
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecMapStringIntfX(yyv10, false, d)
				}
			}
		case "Env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv12 := &x.Env
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					z.F.DecMapStringStringX(yyv12, false, d)
				}
			}
		case "Services":
			if r.TryDecodeAsNil() {
				x.Services = nil
			} else {
				yyv14 := &x.Services
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					h.decSlicePtrtoService((*[]*Service)(yyv14), d)
				}
			}
		case "Vault":
			if r.TryDecodeAsNil() {
				if x.Vault != nil {
					x.Vault = nil
				}
			} else {
				if x.Vault == nil {
					x.Vault = new(Vault)
				}
				x.Vault.CodecDecodeSelf(d)
			}
		case "Templates":
			if r.TryDecodeAsNil() {
				x.Templates = nil
			} else {
				yyv17 := &x.Templates
				yym18 := z.DecBinary()
				_ = yym18
				if false {
				} else {
					h.decSlicePtrtoTemplate((*[]*Template)(yyv17), d)
				}
			}
		case "Constraints":
			if r.TryDecodeAsNil() {
				x.Constraints = nil
			} else {
				yyv19 := &x.Constraints
				yym20 := z.DecBinary()
				_ = yym20
				if false {
				} else {
					h.decSlicePtrtoConstraint((*[]*Constraint)(yyv19), d)
				}
			}
		case "Resources":
			if r.TryDecodeAsNil() {
				if x.Resources != nil {
					x.Resources = nil
				}
			} else {
				if x.Resources == nil {
					x.Resources = new(Resources)
				}
				x.Resources.CodecDecodeSelf(d)
			}
		case "DispatchPayload":
			if r.TryDecodeAsNil() {
				if x.DispatchPayload != nil {
					x.DispatchPayload = nil
				}
			} else {
				if x.DispatchPayload == nil {
					x.DispatchPayload = new(DispatchPayloadConfig)
				}
				x.DispatchPayload.CodecDecodeSelf(d)
			}
		case "Meta":
			if r.TryDecodeAsNil() {
				x.Meta = nil
			} else {
				yyv23 := &x.Meta
				yym24 := z.DecBinary()
				_ = yym24
				if false {
				} else {
					z.F.DecMapStringStringX(yyv23, false, d)
				}
			}
		case "KillTimeout":
			if r.TryDecodeAsNil() {
				x.KillTimeout = 0
			} else {
				yyv25 := &x.KillTimeout
				yym26 := z.DecBinary()
				_ = yym26
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv25) {
				} else {
					*((*int64)(yyv25)) = int64(r.DecodeInt(64))
				}
			}
		case "LogConfig":
			if r.TryDecodeAsNil() {
				if x.LogConfig != nil {
					x.LogConfig = nil
				}
			} else {
				if x.LogConfig == nil {
					x.LogConfig = new(LogConfig)
				}
				x.LogConfig.CodecDecodeSelf(d)
			}
		case "Artifacts":
			if r.TryDecodeAsNil() {
				x.Artifacts = nil
			} else {
				yyv28 := &x.Artifacts
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					h.decSlicePtrtoTaskArtifact((*[]*TaskArtifact)(yyv28), d)
				}
			}
		case "Leader":
			if r.TryDecodeAsNil() {
				x.Leader = false
			} else {
				yyv30 := &x.Leader
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					*((*bool)(yyv30)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *Task) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj32 int
	var yyb32 bool
	var yyhl32 bool = l >= 0
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv33 := &x.Name
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		yyv35 := &x.Driver
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		yyv37 := &x.User
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Config = nil
	} else {
		yyv39 := &x.Config
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			z.F.DecMapStringIntfX(yyv39, false, d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv41 := &x.Env
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			z.F.DecMapStringStringX(yyv41, false, d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Services = nil
	} else {
		yyv43 := &x.Services
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			h.decSlicePtrtoService((*[]*Service)(yyv43), d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Vault != nil {
			x.Vault = nil
		}
	} else {
		if x.Vault == nil {
			x.Vault = new(Vault)
		}
		x.Vault.CodecDecodeSelf(d)
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Templates = nil
	} else {
		yyv46 := &x.Templates
		yym47 := z.DecBinary()
		_ = yym47
		if false {
		} else {
			h.decSlicePtrtoTemplate((*[]*Template)(yyv46), d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Constraints = nil
	} else {
		yyv48 := &x.Constraints
		yym49 := z.DecBinary()
		_ = yym49
		if false {
		} else {
			h.decSlicePtrtoConstraint((*[]*Constraint)(yyv48), d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Resources != nil {
			x.Resources = nil
		}
	} else {
		if x.Resources == nil {
			x.Resources = new(Resources)
		}
		x.Resources.CodecDecodeSelf(d)
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.DispatchPayload != nil {
			x.DispatchPayload = nil
		}
	} else {
		if x.DispatchPayload == nil {
			x.DispatchPayload = new(DispatchPayloadConfig)
		}
		x.DispatchPayload.CodecDecodeSelf(d)
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Meta = nil
	} else {
		yyv52 := &x.Meta
		yym53 := z.DecBinary()
		_ = yym53
		if false {
		} else {
			z.F.DecMapStringStringX(yyv52, false, d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KillTimeout = 0
	} else {
		yyv54 := &x.KillTimeout
		yym55 := z.DecBinary()
		_ = yym55
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv54) {
		} else {
			*((*int64)(yyv54)) = int64(r.DecodeInt(64))
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.LogConfig != nil {
			x.LogConfig = nil
		}
	} else {
		if x.LogConfig == nil {
			x.LogConfig = new(LogConfig)
		}
		x.LogConfig.CodecDecodeSelf(d)
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Artifacts = nil
	} else {
		yyv57 := &x.Artifacts
		yym58 := z.DecBinary()
		_ = yym58
		if false {
		} else {
			h.decSlicePtrtoTaskArtifact((*[]*TaskArtifact)(yyv57), d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Leader = false
	} else {
		yyv59 := &x.Leader
		yym60 := z.DecBinary()
		_ = yym60
		if false {
		} else {
			*((*bool)(yyv59)) = r.DecodeBool()
		}
	}
	for {
		yyj32++
		if yyhl32 {
			yyb32 = yyj32 > l
		} else {
			yyb32 = r.CheckBreak()
		}
		if yyb32 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj32-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *Template) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [9]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(9)
			} else {
				yynn2 = 9
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.SourcePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("SourcePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.SourcePath))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DestPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DestPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DestPath))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EmbeddedTmpl))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EmbeddedTmpl"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EmbeddedTmpl))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ChangeMode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ChangeMode"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ChangeMode))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ChangeSignal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ChangeSignal"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ChangeSignal))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Splay) {
				} else {
					r.EncodeInt(int64(x.Splay))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Splay"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Splay) {
				} else {
					r.EncodeInt(int64(x.Splay))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Perms))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Perms"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Perms))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.LeftDelim))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LeftDelim"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.LeftDelim))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.RightDelim))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("RightDelim"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.RightDelim))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *Template) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *Template) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "SourcePath":
			if r.TryDecodeAsNil() {
				x.SourcePath = ""
			} else {
				yyv4 := &x.SourcePath
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "DestPath":
			if r.TryDecodeAsNil() {
				x.DestPath = ""
			} else {
				yyv6 := &x.DestPath
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "EmbeddedTmpl":
			if r.TryDecodeAsNil() {
				x.EmbeddedTmpl = ""
			} else {
				yyv8 := &x.EmbeddedTmpl
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "ChangeMode":
			if r.TryDecodeAsNil() {
				x.ChangeMode = ""
			} else {
				yyv10 := &x.ChangeMode
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "ChangeSignal":
			if r.TryDecodeAsNil() {
				x.ChangeSignal = ""
			} else {
				yyv12 := &x.ChangeSignal
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Splay":
			if r.TryDecodeAsNil() {
				x.Splay = 0
			} else {
				yyv14 := &x.Splay
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv14) {
				} else {
					*((*int64)(yyv14)) = int64(r.DecodeInt(64))
				}
			}
		case "Perms":
			if r.TryDecodeAsNil() {
				x.Perms = ""
			} else {
				yyv16 := &x.Perms
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "LeftDelim":
			if r.TryDecodeAsNil() {
				x.LeftDelim = ""
			} else {
				yyv18 := &x.LeftDelim
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "RightDelim":
			if r.TryDecodeAsNil() {
				x.RightDelim = ""
			} else {
				yyv20 := &x.RightDelim
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *Template) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj22 int
	var yyb22 bool
	var yyhl22 bool = l >= 0
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.SourcePath = ""
	} else {
		yyv23 := &x.SourcePath
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DestPath = ""
	} else {
		yyv25 := &x.DestPath
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EmbeddedTmpl = ""
	} else {
		yyv27 := &x.EmbeddedTmpl
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ChangeMode = ""
	} else {
		yyv29 := &x.ChangeMode
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*string)(yyv29)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ChangeSignal = ""
	} else {
		yyv31 := &x.ChangeSignal
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*string)(yyv31)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Splay = 0
	} else {
		yyv33 := &x.Splay
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv33) {
		} else {
			*((*int64)(yyv33)) = int64(r.DecodeInt(64))
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Perms = ""
	} else {
		yyv35 := &x.Perms
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LeftDelim = ""
	} else {
		yyv37 := &x.LeftDelim
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj22++
	if yyhl22 {
		yyb22 = yyj22 > l
	} else {
		yyb22 = r.CheckBreak()
	}
	if yyb22 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.RightDelim = ""
	} else {
		yyv39 := &x.RightDelim
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	for {
		yyj22++
		if yyhl22 {
			yyb22 = yyj22 > l
		} else {
			yyb22 = r.CheckBreak()
		}
		if yyb22 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj22-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *TaskState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.State))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("State"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.State))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.Failed))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Failed"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.Failed))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Events == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encSlicePtrtoTaskEvent(([]*TaskEvent)(x.Events), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Events"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Events == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encSlicePtrtoTaskEvent(([]*TaskEvent)(x.Events), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *TaskState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *TaskState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "State":
			if r.TryDecodeAsNil() {
				x.State = ""
			} else {
				yyv4 := &x.State
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Failed":
			if r.TryDecodeAsNil() {
				x.Failed = false
			} else {
				yyv6 := &x.Failed
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "Events":
			if r.TryDecodeAsNil() {
				x.Events = nil
			} else {
				yyv8 := &x.Events
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					h.decSlicePtrtoTaskEvent((*[]*TaskEvent)(yyv8), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *TaskState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.State = ""
	} else {
		yyv11 := &x.State
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Failed = false
	} else {
		yyv13 := &x.Failed
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*bool)(yyv13)) = r.DecodeBool()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Events = nil
	} else {
		yyv15 := &x.Events
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			h.decSlicePtrtoTaskEvent((*[]*TaskEvent)(yyv15), d)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *TaskEvent) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [21]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(21)
			} else {
				yynn2 = 21
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.Time))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Time"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.Time))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.FailsTask))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("FailsTask"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeBool(bool(x.FailsTask))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.RestartReason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("RestartReason"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.RestartReason))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.SetupError))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("SetupError"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.SetupError))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DriverError))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DriverError"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DriverError))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ExitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeInt(int64(x.Signal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Signal"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeInt(int64(x.Signal))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Message))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Message"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Message))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else if z.HasExtensions() && z.EncExt(x.KillTimeout) {
				} else {
					r.EncodeInt(int64(x.KillTimeout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KillTimeout"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else if z.HasExtensions() && z.EncExt(x.KillTimeout) {
				} else {
					r.EncodeInt(int64(x.KillTimeout))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.KillError))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KillError"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.KillError))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.KillReason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("KillReason"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.KillReason))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeInt(int64(x.StartDelay))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("StartDelay"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeInt(int64(x.StartDelay))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym43 := z.EncBinary()
				_ = yym43
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DownloadError))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DownloadError"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym44 := z.EncBinary()
				_ = yym44
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DownloadError))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym46 := z.EncBinary()
				_ = yym46
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ValidationError))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ValidationError"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym47 := z.EncBinary()
				_ = yym47
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ValidationError))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym49 := z.EncBinary()
				_ = yym49
				if false {
				} else {
					r.EncodeInt(int64(x.DiskLimit))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DiskLimit"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym50 := z.EncBinary()
				_ = yym50
				if false {
				} else {
					r.EncodeInt(int64(x.DiskLimit))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym52 := z.EncBinary()
				_ = yym52
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.FailedSibling))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("FailedSibling"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym53 := z.EncBinary()
				_ = yym53
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.FailedSibling))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym55 := z.EncBinary()
				_ = yym55
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.VaultError))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("VaultError"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym56 := z.EncBinary()
				_ = yym56
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.VaultError))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym58 := z.EncBinary()
				_ = yym58
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.TaskSignalReason))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("TaskSignalReason"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym59 := z.EncBinary()
				_ = yym59
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.TaskSignalReason))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym61 := z.EncBinary()
				_ = yym61
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.TaskSignal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("TaskSignal"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym62 := z.EncBinary()
				_ = yym62
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.TaskSignal))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym64 := z.EncBinary()
				_ = yym64
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DriverMessage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DriverMessage"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym65 := z.EncBinary()
				_ = yym65
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DriverMessage))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *TaskEvent) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *TaskEvent) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv4 := &x.Type
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Time":
			if r.TryDecodeAsNil() {
				x.Time = 0
			} else {
				yyv6 := &x.Time
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int64)(yyv6)) = int64(r.DecodeInt(64))
				}
			}
		case "FailsTask":
			if r.TryDecodeAsNil() {
				x.FailsTask = false
			} else {
				yyv8 := &x.FailsTask
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*bool)(yyv8)) = r.DecodeBool()
				}
			}
		case "RestartReason":
			if r.TryDecodeAsNil() {
				x.RestartReason = ""
			} else {
				yyv10 := &x.RestartReason
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "SetupError":
			if r.TryDecodeAsNil() {
				x.SetupError = ""
			} else {
				yyv12 := &x.SetupError
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "DriverError":
			if r.TryDecodeAsNil() {
				x.DriverError = ""
			} else {
				yyv14 := &x.DriverError
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "ExitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				yyv16 := &x.ExitCode
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*int)(yyv16)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "Signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				yyv18 := &x.Signal
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*int)(yyv18)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "Message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				yyv20 := &x.Message
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "KillTimeout":
			if r.TryDecodeAsNil() {
				x.KillTimeout = 0
			} else {
				yyv22 := &x.KillTimeout
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv22) {
				} else {
					*((*int64)(yyv22)) = int64(r.DecodeInt(64))
				}
			}
		case "KillError":
			if r.TryDecodeAsNil() {
				x.KillError = ""
			} else {
				yyv24 := &x.KillError
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*string)(yyv24)) = r.DecodeString()
				}
			}
		case "KillReason":
			if r.TryDecodeAsNil() {
				x.KillReason = ""
			} else {
				yyv26 := &x.KillReason
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*string)(yyv26)) = r.DecodeString()
				}
			}
		case "StartDelay":
			if r.TryDecodeAsNil() {
				x.StartDelay = 0
			} else {
				yyv28 := &x.StartDelay
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*int64)(yyv28)) = int64(r.DecodeInt(64))
				}
			}
		case "DownloadError":
			if r.TryDecodeAsNil() {
				x.DownloadError = ""
			} else {
				yyv30 := &x.DownloadError
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					*((*string)(yyv30)) = r.DecodeString()
				}
			}
		case "ValidationError":
			if r.TryDecodeAsNil() {
				x.ValidationError = ""
			} else {
				yyv32 := &x.ValidationError
				yym33 := z.DecBinary()
				_ = yym33
				if false {
				} else {
					*((*string)(yyv32)) = r.DecodeString()
				}
			}
		case "DiskLimit":
			if r.TryDecodeAsNil() {
				x.DiskLimit = 0
			} else {
				yyv34 := &x.DiskLimit
				yym35 := z.DecBinary()
				_ = yym35
				if false {
				} else {
					*((*int64)(yyv34)) = int64(r.DecodeInt(64))
				}
			}
		case "FailedSibling":
			if r.TryDecodeAsNil() {
				x.FailedSibling = ""
			} else {
				yyv36 := &x.FailedSibling
				yym37 := z.DecBinary()
				_ = yym37
				if false {
				} else {
					*((*string)(yyv36)) = r.DecodeString()
				}
			}
		case "VaultError":
			if r.TryDecodeAsNil() {
				x.VaultError = ""
			} else {
				yyv38 := &x.VaultError
				yym39 := z.DecBinary()
				_ = yym39
				if false {
				} else {
					*((*string)(yyv38)) = r.DecodeString()
				}
			}
		case "TaskSignalReason":
			if r.TryDecodeAsNil() {
				x.TaskSignalReason = ""
			} else {
				yyv40 := &x.TaskSignalReason
				yym41 := z.DecBinary()
				_ = yym41
				if false {
				} else {
					*((*string)(yyv40)) = r.DecodeString()
				}
			}
		case "TaskSignal":
			if r.TryDecodeAsNil() {
				x.TaskSignal = ""
			} else {
				yyv42 := &x.TaskSignal
				yym43 := z.DecBinary()
				_ = yym43
				if false {
				} else {
					*((*string)(yyv42)) = r.DecodeString()
				}
			}
		case "DriverMessage":
			if r.TryDecodeAsNil() {
				x.DriverMessage = ""
			} else {
				yyv44 := &x.DriverMessage
				yym45 := z.DecBinary()
				_ = yym45
				if false {
				} else {
					*((*string)(yyv44)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *TaskEvent) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj46 int
	var yyb46 bool
	var yyhl46 bool = l >= 0
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv47 := &x.Type
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*string)(yyv47)) = r.DecodeString()
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Time = 0
	} else {
		yyv49 := &x.Time
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*int64)(yyv49)) = int64(r.DecodeInt(64))
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.FailsTask = false
	} else {
		yyv51 := &x.FailsTask
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*bool)(yyv51)) = r.DecodeBool()
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.RestartReason = ""
	} else {
		yyv53 := &x.RestartReason
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			*((*string)(yyv53)) = r.DecodeString()
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.SetupError = ""
	} else {
		yyv55 := &x.SetupError
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else {
			*((*string)(yyv55)) = r.DecodeString()
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DriverError = ""
	} else {
		yyv57 := &x.DriverError
		yym58 := z.DecBinary()
		_ = yym58
		if false {
		} else {
			*((*string)(yyv57)) = r.DecodeString()
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		yyv59 := &x.ExitCode
		yym60 := z.DecBinary()
		_ = yym60
		if false {
		} else {
			*((*int)(yyv59)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		yyv61 := &x.Signal
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else {
			*((*int)(yyv61)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		yyv63 := &x.Message
		yym64 := z.DecBinary()
		_ = yym64
		if false {
		} else {
			*((*string)(yyv63)) = r.DecodeString()
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KillTimeout = 0
	} else {
		yyv65 := &x.KillTimeout
		yym66 := z.DecBinary()
		_ = yym66
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv65) {
		} else {
			*((*int64)(yyv65)) = int64(r.DecodeInt(64))
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KillError = ""
	} else {
		yyv67 := &x.KillError
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else {
			*((*string)(yyv67)) = r.DecodeString()
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.KillReason = ""
	} else {
		yyv69 := &x.KillReason
		yym70 := z.DecBinary()
		_ = yym70
		if false {
		} else {
			*((*string)(yyv69)) = r.DecodeString()
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.StartDelay = 0
	} else {
		yyv71 := &x.StartDelay
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else {
			*((*int64)(yyv71)) = int64(r.DecodeInt(64))
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DownloadError = ""
	} else {
		yyv73 := &x.DownloadError
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else {
			*((*string)(yyv73)) = r.DecodeString()
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ValidationError = ""
	} else {
		yyv75 := &x.ValidationError
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*string)(yyv75)) = r.DecodeString()
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DiskLimit = 0
	} else {
		yyv77 := &x.DiskLimit
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			*((*int64)(yyv77)) = int64(r.DecodeInt(64))
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.FailedSibling = ""
	} else {
		yyv79 := &x.FailedSibling
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			*((*string)(yyv79)) = r.DecodeString()
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.VaultError = ""
	} else {
		yyv81 := &x.VaultError
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else {
			*((*string)(yyv81)) = r.DecodeString()
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.TaskSignalReason = ""
	} else {
		yyv83 := &x.TaskSignalReason
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else {
			*((*string)(yyv83)) = r.DecodeString()
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.TaskSignal = ""
	} else {
		yyv85 := &x.TaskSignal
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else {
			*((*string)(yyv85)) = r.DecodeString()
		}
	}
	yyj46++
	if yyhl46 {
		yyb46 = yyj46 > l
	} else {
		yyb46 = r.CheckBreak()
	}
	if yyb46 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DriverMessage = ""
	} else {
		yyv87 := &x.DriverMessage
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			*((*string)(yyv87)) = r.DecodeString()
		}
	}
	for {
		yyj46++
		if yyhl46 {
			yyb46 = yyj46 > l
		} else {
			yyb46 = r.CheckBreak()
		}
		if yyb46 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj46-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *TaskArtifact) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.GetterSource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("GetterSource"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.GetterSource))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.GetterOptions == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncMapStringStringV(x.GetterOptions, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("GetterOptions"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.GetterOptions == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncMapStringStringV(x.GetterOptions, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.RelativeDest))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("RelativeDest"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.RelativeDest))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *TaskArtifact) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *TaskArtifact) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "GetterSource":
			if r.TryDecodeAsNil() {
				x.GetterSource = ""
			} else {
				yyv4 := &x.GetterSource
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "GetterOptions":
			if r.TryDecodeAsNil() {
				x.GetterOptions = nil
			} else {
				yyv6 := &x.GetterOptions
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecMapStringStringX(yyv6, false, d)
				}
			}
		case "RelativeDest":
			if r.TryDecodeAsNil() {
				x.RelativeDest = ""
			} else {
				yyv8 := &x.RelativeDest
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *TaskArtifact) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.GetterSource = ""
	} else {
		yyv11 := &x.GetterSource
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.GetterOptions = nil
	} else {
		yyv13 := &x.GetterOptions
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			z.F.DecMapStringStringX(yyv13, false, d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.RelativeDest = ""
	} else {
		yyv15 := &x.RelativeDest
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *Constraint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.LTarget))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("LTarget"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.LTarget))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.RTarget))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("RTarget"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.RTarget))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Operand))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Operand"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Operand))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *Constraint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *Constraint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "LTarget":
			if r.TryDecodeAsNil() {
				x.LTarget = ""
			} else {
				yyv4 := &x.LTarget
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "RTarget":
			if r.TryDecodeAsNil() {
				x.RTarget = ""
			} else {
				yyv6 := &x.RTarget
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Operand":
			if r.TryDecodeAsNil() {
				x.Operand = ""
			} else {
				yyv8 := &x.Operand
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *Constraint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.LTarget = ""
	} else {
		yyv11 := &x.LTarget
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.RTarget = ""
	} else {
		yyv13 := &x.RTarget
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Operand = ""
	} else {
		yyv15 := &x.Operand
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *EphemeralDisk) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.Sticky))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Sticky"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.Sticky))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.SizeMB))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("SizeMB"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.SizeMB))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.Migrate))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Migrate"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeBool(bool(x.Migrate))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *EphemeralDisk) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *EphemeralDisk) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Sticky":
			if r.TryDecodeAsNil() {
				x.Sticky = false
			} else {
				yyv4 := &x.Sticky
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		case "SizeMB":
			if r.TryDecodeAsNil() {
				x.SizeMB = 0
			} else {
				yyv6 := &x.SizeMB
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "Migrate":
			if r.TryDecodeAsNil() {
				x.Migrate = false
			} else {
				yyv8 := &x.Migrate
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*bool)(yyv8)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *EphemeralDisk) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Sticky = false
	} else {
		yyv11 := &x.Sticky
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*bool)(yyv11)) = r.DecodeBool()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.SizeMB = 0
	} else {
		yyv13 := &x.SizeMB
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*int)(yyv13)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Migrate = false
	} else {
		yyv15 := &x.Migrate
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*bool)(yyv15)) = r.DecodeBool()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *Vault) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Policies == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.Policies, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Policies"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Policies == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.Policies, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.Env))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Env"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.Env))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ChangeMode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ChangeMode"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ChangeMode))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ChangeSignal))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ChangeSignal"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ChangeSignal))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *Vault) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *Vault) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Policies":
			if r.TryDecodeAsNil() {
				x.Policies = nil
			} else {
				yyv4 := &x.Policies
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecSliceStringX(yyv4, false, d)
				}
			}
		case "Env":
			if r.TryDecodeAsNil() {
				x.Env = false
			} else {
				yyv6 := &x.Env
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		case "ChangeMode":
			if r.TryDecodeAsNil() {
				x.ChangeMode = ""
			} else {
				yyv8 := &x.ChangeMode
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "ChangeSignal":
			if r.TryDecodeAsNil() {
				x.ChangeSignal = ""
			} else {
				yyv10 := &x.ChangeSignal
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *Vault) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Policies = nil
	} else {
		yyv13 := &x.Policies
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			z.F.DecSliceStringX(yyv13, false, d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Env = false
	} else {
		yyv15 := &x.Env
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*bool)(yyv15)) = r.DecodeBool()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ChangeMode = ""
	} else {
		yyv17 := &x.ChangeMode
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ChangeSignal = ""
	} else {
		yyv19 := &x.ChangeSignal
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *Allocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [21]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(21)
			} else {
				yynn2 = 21
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.TaskGroup))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("TaskGroup"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.TaskGroup))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Resources == nil {
					r.EncodeNil()
				} else {
					x.Resources.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Resources"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Resources == nil {
					r.EncodeNil()
				} else {
					x.Resources.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.SharedResources == nil {
					r.EncodeNil()
				} else {
					x.SharedResources.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("SharedResources"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.SharedResources == nil {
					r.EncodeNil()
				} else {
					x.SharedResources.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.TaskResources == nil {
					r.EncodeNil()
				} else {
					yym31 := z.EncBinary()
					_ = yym31
					if false {
					} else {
						h.encMapstringPtrtoResources((map[string]*Resources)(x.TaskResources), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("TaskResources"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.TaskResources == nil {
					r.EncodeNil()
				} else {
					yym32 := z.EncBinary()
					_ = yym32
					if false {
					} else {
						h.encMapstringPtrtoResources((map[string]*Resources)(x.TaskResources), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Metrics == nil {
					r.EncodeNil()
				} else {
					x.Metrics.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Metrics"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Metrics == nil {
					r.EncodeNil()
				} else {
					x.Metrics.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DesiredStatus))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DesiredStatus"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DesiredStatus))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DesiredDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DesiredDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DesiredDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym43 := z.EncBinary()
				_ = yym43
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ClientStatus))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ClientStatus"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym44 := z.EncBinary()
				_ = yym44
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ClientStatus))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym46 := z.EncBinary()
				_ = yym46
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ClientDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ClientDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym47 := z.EncBinary()
				_ = yym47
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ClientDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.TaskStates == nil {
					r.EncodeNil()
				} else {
					yym49 := z.EncBinary()
					_ = yym49
					if false {
					} else {
						h.encMapstringPtrtoTaskState((map[string]*TaskState)(x.TaskStates), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("TaskStates"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.TaskStates == nil {
					r.EncodeNil()
				} else {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						h.encMapstringPtrtoTaskState((map[string]*TaskState)(x.TaskStates), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym52 := z.EncBinary()
				_ = yym52
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.PreviousAllocation))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("PreviousAllocation"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym53 := z.EncBinary()
				_ = yym53
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.PreviousAllocation))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym55 := z.EncBinary()
				_ = yym55
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym56 := z.EncBinary()
				_ = yym56
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym58 := z.EncBinary()
				_ = yym58
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym59 := z.EncBinary()
				_ = yym59
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym61 := z.EncBinary()
				_ = yym61
				if false {
				} else {
					r.EncodeUint(uint64(x.AllocModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllocModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym62 := z.EncBinary()
				_ = yym62
				if false {
				} else {
					r.EncodeUint(uint64(x.AllocModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym64 := z.EncBinary()
				_ = yym64
				if false {
				} else {
					r.EncodeInt(int64(x.CreateTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CreateTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym65 := z.EncBinary()
				_ = yym65
				if false {
				} else {
					r.EncodeInt(int64(x.CreateTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *Allocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *Allocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv6 := &x.EvalID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv8 := &x.Name
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv10 := &x.NodeID
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv12 := &x.JobID
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "TaskGroup":
			if r.TryDecodeAsNil() {
				x.TaskGroup = ""
			} else {
				yyv15 := &x.TaskGroup
				yym16 := z.DecBinary()
				_ = yym16
				if false {
				} else {
					*((*string)(yyv15)) = r.DecodeString()
				}
			}
		case "Resources":
			if r.TryDecodeAsNil() {
				if x.Resources != nil {
					x.Resources = nil
				}
			} else {
				if x.Resources == nil {
					x.Resources = new(Resources)
				}
				x.Resources.CodecDecodeSelf(d)
			}
		case "SharedResources":
			if r.TryDecodeAsNil() {
				if x.SharedResources != nil {
					x.SharedResources = nil
				}
			} else {
				if x.SharedResources == nil {
					x.SharedResources = new(Resources)
				}
				x.SharedResources.CodecDecodeSelf(d)
			}
		case "TaskResources":
			if r.TryDecodeAsNil() {
				x.TaskResources = nil
			} else {
				yyv19 := &x.TaskResources
				yym20 := z.DecBinary()
				_ = yym20
				if false {
				} else {
					h.decMapstringPtrtoResources((*map[string]*Resources)(yyv19), d)
				}
			}
		case "Metrics":
			if r.TryDecodeAsNil() {
				if x.Metrics != nil {
					x.Metrics = nil
				}
			} else {
				if x.Metrics == nil {
					x.Metrics = new(AllocMetric)
				}
				x.Metrics.CodecDecodeSelf(d)
			}
		case "DesiredStatus":
			if r.TryDecodeAsNil() {
				x.DesiredStatus = ""
			} else {
				yyv22 := &x.DesiredStatus
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*string)(yyv22)) = r.DecodeString()
				}
			}
		case "DesiredDescription":
			if r.TryDecodeAsNil() {
				x.DesiredDescription = ""
			} else {
				yyv24 := &x.DesiredDescription
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*string)(yyv24)) = r.DecodeString()
				}
			}
		case "ClientStatus":
			if r.TryDecodeAsNil() {
				x.ClientStatus = ""
			} else {
				yyv26 := &x.ClientStatus
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*string)(yyv26)) = r.DecodeString()
				}
			}
		case "ClientDescription":
			if r.TryDecodeAsNil() {
				x.ClientDescription = ""
			} else {
				yyv28 := &x.ClientDescription
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*string)(yyv28)) = r.DecodeString()
				}
			}
		case "TaskStates":
			if r.TryDecodeAsNil() {
				x.TaskStates = nil
			} else {
				yyv30 := &x.TaskStates
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					h.decMapstringPtrtoTaskState((*map[string]*TaskState)(yyv30), d)
				}
			}
		case "PreviousAllocation":
			if r.TryDecodeAsNil() {
				x.PreviousAllocation = ""
			} else {
				yyv32 := &x.PreviousAllocation
				yym33 := z.DecBinary()
				_ = yym33
				if false {
				} else {
					*((*string)(yyv32)) = r.DecodeString()
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv34 := &x.CreateIndex
				yym35 := z.DecBinary()
				_ = yym35
				if false {
				} else {
					*((*uint64)(yyv34)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv36 := &x.ModifyIndex
				yym37 := z.DecBinary()
				_ = yym37
				if false {
				} else {
					*((*uint64)(yyv36)) = uint64(r.DecodeUint(64))
				}
			}
		case "AllocModifyIndex":
			if r.TryDecodeAsNil() {
				x.AllocModifyIndex = 0
			} else {
				yyv38 := &x.AllocModifyIndex
				yym39 := z.DecBinary()
				_ = yym39
				if false {
				} else {
					*((*uint64)(yyv38)) = uint64(r.DecodeUint(64))
				}
			}
		case "CreateTime":
			if r.TryDecodeAsNil() {
				x.CreateTime = 0
			} else {
				yyv40 := &x.CreateTime
				yym41 := z.DecBinary()
				_ = yym41
				if false {
				} else {
					*((*int64)(yyv40)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *Allocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj42 int
	var yyb42 bool
	var yyhl42 bool = l >= 0
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv43 := &x.ID
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*string)(yyv43)) = r.DecodeString()
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv45 := &x.EvalID
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*string)(yyv45)) = r.DecodeString()
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv47 := &x.Name
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*string)(yyv47)) = r.DecodeString()
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv49 := &x.NodeID
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*string)(yyv49)) = r.DecodeString()
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv51 := &x.JobID
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*string)(yyv51)) = r.DecodeString()
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.TaskGroup = ""
	} else {
		yyv54 := &x.TaskGroup
		yym55 := z.DecBinary()
		_ = yym55
		if false {
		} else {
			*((*string)(yyv54)) = r.DecodeString()
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Resources != nil {
			x.Resources = nil
		}
	} else {
		if x.Resources == nil {
			x.Resources = new(Resources)
		}
		x.Resources.CodecDecodeSelf(d)
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.SharedResources != nil {
			x.SharedResources = nil
		}
	} else {
		if x.SharedResources == nil {
			x.SharedResources = new(Resources)
		}
		x.SharedResources.CodecDecodeSelf(d)
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.TaskResources = nil
	} else {
		yyv58 := &x.TaskResources
		yym59 := z.DecBinary()
		_ = yym59
		if false {
		} else {
			h.decMapstringPtrtoResources((*map[string]*Resources)(yyv58), d)
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Metrics != nil {
			x.Metrics = nil
		}
	} else {
		if x.Metrics == nil {
			x.Metrics = new(AllocMetric)
		}
		x.Metrics.CodecDecodeSelf(d)
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DesiredStatus = ""
	} else {
		yyv61 := &x.DesiredStatus
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else {
			*((*string)(yyv61)) = r.DecodeString()
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DesiredDescription = ""
	} else {
		yyv63 := &x.DesiredDescription
		yym64 := z.DecBinary()
		_ = yym64
		if false {
		} else {
			*((*string)(yyv63)) = r.DecodeString()
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ClientStatus = ""
	} else {
		yyv65 := &x.ClientStatus
		yym66 := z.DecBinary()
		_ = yym66
		if false {
		} else {
			*((*string)(yyv65)) = r.DecodeString()
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ClientDescription = ""
	} else {
		yyv67 := &x.ClientDescription
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else {
			*((*string)(yyv67)) = r.DecodeString()
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.TaskStates = nil
	} else {
		yyv69 := &x.TaskStates
		yym70 := z.DecBinary()
		_ = yym70
		if false {
		} else {
			h.decMapstringPtrtoTaskState((*map[string]*TaskState)(yyv69), d)
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.PreviousAllocation = ""
	} else {
		yyv71 := &x.PreviousAllocation
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else {
			*((*string)(yyv71)) = r.DecodeString()
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv73 := &x.CreateIndex
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else {
			*((*uint64)(yyv73)) = uint64(r.DecodeUint(64))
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv75 := &x.ModifyIndex
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*uint64)(yyv75)) = uint64(r.DecodeUint(64))
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllocModifyIndex = 0
	} else {
		yyv77 := &x.AllocModifyIndex
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			*((*uint64)(yyv77)) = uint64(r.DecodeUint(64))
		}
	}
	yyj42++
	if yyhl42 {
		yyb42 = yyj42 > l
	} else {
		yyb42 = r.CheckBreak()
	}
	if yyb42 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CreateTime = 0
	} else {
		yyv79 := &x.CreateTime
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			*((*int64)(yyv79)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj42++
		if yyhl42 {
			yyb42 = yyj42 > l
		} else {
			yyb42 = r.CheckBreak()
		}
		if yyb42 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj42-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *AllocListStub) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [14]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(14)
			} else {
				yynn2 = 14
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.TaskGroup))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("TaskGroup"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.TaskGroup))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DesiredStatus))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DesiredStatus"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DesiredStatus))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DesiredDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DesiredDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.DesiredDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ClientStatus))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ClientStatus"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ClientStatus))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ClientDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ClientDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ClientDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.TaskStates == nil {
					r.EncodeNil()
				} else {
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						h.encMapstringPtrtoTaskState((map[string]*TaskState)(x.TaskStates), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("TaskStates"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.TaskStates == nil {
					r.EncodeNil()
				} else {
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						h.encMapstringPtrtoTaskState((map[string]*TaskState)(x.TaskStates), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym43 := z.EncBinary()
				_ = yym43
				if false {
				} else {
					r.EncodeInt(int64(x.CreateTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CreateTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym44 := z.EncBinary()
				_ = yym44
				if false {
				} else {
					r.EncodeInt(int64(x.CreateTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *AllocListStub) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *AllocListStub) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv6 := &x.EvalID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				yyv8 := &x.Name
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv10 := &x.NodeID
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv12 := &x.JobID
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "TaskGroup":
			if r.TryDecodeAsNil() {
				x.TaskGroup = ""
			} else {
				yyv14 := &x.TaskGroup
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "DesiredStatus":
			if r.TryDecodeAsNil() {
				x.DesiredStatus = ""
			} else {
				yyv16 := &x.DesiredStatus
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "DesiredDescription":
			if r.TryDecodeAsNil() {
				x.DesiredDescription = ""
			} else {
				yyv18 := &x.DesiredDescription
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "ClientStatus":
			if r.TryDecodeAsNil() {
				x.ClientStatus = ""
			} else {
				yyv20 := &x.ClientStatus
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "ClientDescription":
			if r.TryDecodeAsNil() {
				x.ClientDescription = ""
			} else {
				yyv22 := &x.ClientDescription
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*string)(yyv22)) = r.DecodeString()
				}
			}
		case "TaskStates":
			if r.TryDecodeAsNil() {
				x.TaskStates = nil
			} else {
				yyv24 := &x.TaskStates
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					h.decMapstringPtrtoTaskState((*map[string]*TaskState)(yyv24), d)
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv26 := &x.CreateIndex
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*uint64)(yyv26)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv28 := &x.ModifyIndex
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*uint64)(yyv28)) = uint64(r.DecodeUint(64))
				}
			}
		case "CreateTime":
			if r.TryDecodeAsNil() {
				x.CreateTime = 0
			} else {
				yyv30 := &x.CreateTime
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					*((*int64)(yyv30)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *AllocListStub) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj32 int
	var yyb32 bool
	var yyhl32 bool = l >= 0
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv33 := &x.ID
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*string)(yyv33)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv35 := &x.EvalID
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		yyv37 := &x.Name
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv39 := &x.NodeID
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv41 := &x.JobID
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.TaskGroup = ""
	} else {
		yyv43 := &x.TaskGroup
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*string)(yyv43)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DesiredStatus = ""
	} else {
		yyv45 := &x.DesiredStatus
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*string)(yyv45)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DesiredDescription = ""
	} else {
		yyv47 := &x.DesiredDescription
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*string)(yyv47)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ClientStatus = ""
	} else {
		yyv49 := &x.ClientStatus
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*string)(yyv49)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ClientDescription = ""
	} else {
		yyv51 := &x.ClientDescription
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*string)(yyv51)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.TaskStates = nil
	} else {
		yyv53 := &x.TaskStates
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			h.decMapstringPtrtoTaskState((*map[string]*TaskState)(yyv53), d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv55 := &x.CreateIndex
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else {
			*((*uint64)(yyv55)) = uint64(r.DecodeUint(64))
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv57 := &x.ModifyIndex
		yym58 := z.DecBinary()
		_ = yym58
		if false {
		} else {
			*((*uint64)(yyv57)) = uint64(r.DecodeUint(64))
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CreateTime = 0
	} else {
		yyv59 := &x.CreateTime
		yym60 := z.DecBinary()
		_ = yym60
		if false {
		} else {
			*((*int64)(yyv59)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj32++
		if yyhl32 {
			yyb32 = yyj32 > l
		} else {
			yyb32 = r.CheckBreak()
		}
		if yyb32 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj32-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *AllocMetric) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [11]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(11)
			} else {
				yynn2 = 11
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.NodesEvaluated))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodesEvaluated"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.NodesEvaluated))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.NodesFiltered))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodesFiltered"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.NodesFiltered))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.NodesAvailable == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						z.F.EncMapStringIntV(x.NodesAvailable, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodesAvailable"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.NodesAvailable == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						z.F.EncMapStringIntV(x.NodesAvailable, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.ClassFiltered == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						z.F.EncMapStringIntV(x.ClassFiltered, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ClassFiltered"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.ClassFiltered == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						z.F.EncMapStringIntV(x.ClassFiltered, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.ConstraintFiltered == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						z.F.EncMapStringIntV(x.ConstraintFiltered, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ConstraintFiltered"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.ConstraintFiltered == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						z.F.EncMapStringIntV(x.ConstraintFiltered, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.NodesExhausted))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodesExhausted"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.NodesExhausted))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.ClassExhausted == nil {
					r.EncodeNil()
				} else {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						z.F.EncMapStringIntV(x.ClassExhausted, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ClassExhausted"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.ClassExhausted == nil {
					r.EncodeNil()
				} else {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						z.F.EncMapStringIntV(x.ClassExhausted, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.DimensionExhausted == nil {
					r.EncodeNil()
				} else {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						z.F.EncMapStringIntV(x.DimensionExhausted, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DimensionExhausted"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.DimensionExhausted == nil {
					r.EncodeNil()
				} else {
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						z.F.EncMapStringIntV(x.DimensionExhausted, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Scores == nil {
					r.EncodeNil()
				} else {
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else {
						z.F.EncMapStringFloat64V(x.Scores, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Scores"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Scores == nil {
					r.EncodeNil()
				} else {
					yym29 := z.EncBinary()
					_ = yym29
					if false {
					} else {
						z.F.EncMapStringFloat64V(x.Scores, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else if z.HasExtensions() && z.EncExt(x.AllocationTime) {
				} else {
					r.EncodeInt(int64(x.AllocationTime))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllocationTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else if z.HasExtensions() && z.EncExt(x.AllocationTime) {
				} else {
					r.EncodeInt(int64(x.AllocationTime))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeInt(int64(x.CoalescedFailures))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CoalescedFailures"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeInt(int64(x.CoalescedFailures))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *AllocMetric) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *AllocMetric) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "NodesEvaluated":
			if r.TryDecodeAsNil() {
				x.NodesEvaluated = 0
			} else {
				yyv4 := &x.NodesEvaluated
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "NodesFiltered":
			if r.TryDecodeAsNil() {
				x.NodesFiltered = 0
			} else {
				yyv6 := &x.NodesFiltered
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "NodesAvailable":
			if r.TryDecodeAsNil() {
				x.NodesAvailable = nil
			} else {
				yyv8 := &x.NodesAvailable
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecMapStringIntX(yyv8, false, d)
				}
			}
		case "ClassFiltered":
			if r.TryDecodeAsNil() {
				x.ClassFiltered = nil
			} else {
				yyv10 := &x.ClassFiltered
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					z.F.DecMapStringIntX(yyv10, false, d)
				}
			}
		case "ConstraintFiltered":
			if r.TryDecodeAsNil() {
				x.ConstraintFiltered = nil
			} else {
				yyv12 := &x.ConstraintFiltered
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					z.F.DecMapStringIntX(yyv12, false, d)
				}
			}
		case "NodesExhausted":
			if r.TryDecodeAsNil() {
				x.NodesExhausted = 0
			} else {
				yyv14 := &x.NodesExhausted
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int)(yyv14)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "ClassExhausted":
			if r.TryDecodeAsNil() {
				x.ClassExhausted = nil
			} else {
				yyv16 := &x.ClassExhausted
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					z.F.DecMapStringIntX(yyv16, false, d)
				}
			}
		case "DimensionExhausted":
			if r.TryDecodeAsNil() {
				x.DimensionExhausted = nil
			} else {
				yyv18 := &x.DimensionExhausted
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					z.F.DecMapStringIntX(yyv18, false, d)
				}
			}
		case "Scores":
			if r.TryDecodeAsNil() {
				x.Scores = nil
			} else {
				yyv20 := &x.Scores
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					z.F.DecMapStringFloat64X(yyv20, false, d)
				}
			}
		case "AllocationTime":
			if r.TryDecodeAsNil() {
				x.AllocationTime = 0
			} else {
				yyv22 := &x.AllocationTime
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv22) {
				} else {
					*((*int64)(yyv22)) = int64(r.DecodeInt(64))
				}
			}
		case "CoalescedFailures":
			if r.TryDecodeAsNil() {
				x.CoalescedFailures = 0
			} else {
				yyv24 := &x.CoalescedFailures
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*int)(yyv24)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *AllocMetric) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodesEvaluated = 0
	} else {
		yyv27 := &x.NodesEvaluated
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*int)(yyv27)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodesFiltered = 0
	} else {
		yyv29 := &x.NodesFiltered
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*int)(yyv29)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodesAvailable = nil
	} else {
		yyv31 := &x.NodesAvailable
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			z.F.DecMapStringIntX(yyv31, false, d)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ClassFiltered = nil
	} else {
		yyv33 := &x.ClassFiltered
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			z.F.DecMapStringIntX(yyv33, false, d)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ConstraintFiltered = nil
	} else {
		yyv35 := &x.ConstraintFiltered
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			z.F.DecMapStringIntX(yyv35, false, d)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodesExhausted = 0
	} else {
		yyv37 := &x.NodesExhausted
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*int)(yyv37)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ClassExhausted = nil
	} else {
		yyv39 := &x.ClassExhausted
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			z.F.DecMapStringIntX(yyv39, false, d)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DimensionExhausted = nil
	} else {
		yyv41 := &x.DimensionExhausted
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			z.F.DecMapStringIntX(yyv41, false, d)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Scores = nil
	} else {
		yyv43 := &x.Scores
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			z.F.DecMapStringFloat64X(yyv43, false, d)
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllocationTime = 0
	} else {
		yyv45 := &x.AllocationTime
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv45) {
		} else {
			*((*int64)(yyv45)) = int64(r.DecodeInt(64))
		}
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CoalescedFailures = 0
	} else {
		yyv47 := &x.CoalescedFailures
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*int)(yyv47)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *Evaluation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [22]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(22)
			} else {
				yynn2 = 22
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.Priority))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Priority"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.Priority))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Type))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Type"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.TriggeredBy))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("TriggeredBy"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.TriggeredBy))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.JobID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("JobModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.JobModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeUint(uint64(x.NodeModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeUint(uint64(x.NodeModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Status"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Status))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.StatusDescription))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("StatusDescription"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.StatusDescription))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Wait) {
				} else {
					r.EncodeInt(int64(x.Wait))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Wait"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Wait) {
				} else {
					r.EncodeInt(int64(x.Wait))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NextEval))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NextEval"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.NextEval))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.PreviousEval))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("PreviousEval"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.PreviousEval))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym43 := z.EncBinary()
				_ = yym43
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.BlockedEval))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("BlockedEval"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym44 := z.EncBinary()
				_ = yym44
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.BlockedEval))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.FailedTGAllocs == nil {
					r.EncodeNil()
				} else {
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						h.encMapstringPtrtoAllocMetric((map[string]*AllocMetric)(x.FailedTGAllocs), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("FailedTGAllocs"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.FailedTGAllocs == nil {
					r.EncodeNil()
				} else {
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else {
						h.encMapstringPtrtoAllocMetric((map[string]*AllocMetric)(x.FailedTGAllocs), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.ClassEligibility == nil {
					r.EncodeNil()
				} else {
					yym49 := z.EncBinary()
					_ = yym49
					if false {
					} else {
						z.F.EncMapStringBoolV(x.ClassEligibility, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ClassEligibility"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.ClassEligibility == nil {
					r.EncodeNil()
				} else {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						z.F.EncMapStringBoolV(x.ClassEligibility, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym52 := z.EncBinary()
				_ = yym52
				if false {
				} else {
					r.EncodeBool(bool(x.EscapedComputedClass))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EscapedComputedClass"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym53 := z.EncBinary()
				_ = yym53
				if false {
				} else {
					r.EncodeBool(bool(x.EscapedComputedClass))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym55 := z.EncBinary()
				_ = yym55
				if false {
				} else {
					r.EncodeBool(bool(x.AnnotatePlan))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AnnotatePlan"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym56 := z.EncBinary()
				_ = yym56
				if false {
				} else {
					r.EncodeBool(bool(x.AnnotatePlan))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym58 := z.EncBinary()
				_ = yym58
				if false {
				} else {
					r.EncodeUint(uint64(x.SnapshotIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("SnapshotIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym59 := z.EncBinary()
				_ = yym59
				if false {
				} else {
					r.EncodeUint(uint64(x.SnapshotIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.QueuedAllocations == nil {
					r.EncodeNil()
				} else {
					yym61 := z.EncBinary()
					_ = yym61
					if false {
					} else {
						z.F.EncMapStringIntV(x.QueuedAllocations, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("QueuedAllocations"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.QueuedAllocations == nil {
					r.EncodeNil()
				} else {
					yym62 := z.EncBinary()
					_ = yym62
					if false {
					} else {
						z.F.EncMapStringIntV(x.QueuedAllocations, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym64 := z.EncBinary()
				_ = yym64
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("CreateIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym65 := z.EncBinary()
				_ = yym65
				if false {
				} else {
					r.EncodeUint(uint64(x.CreateIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym67 := z.EncBinary()
				_ = yym67
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("ModifyIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym68 := z.EncBinary()
				_ = yym68
				if false {
				} else {
					r.EncodeUint(uint64(x.ModifyIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *Evaluation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *Evaluation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "ID":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Priority":
			if r.TryDecodeAsNil() {
				x.Priority = 0
			} else {
				yyv6 := &x.Priority
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "Type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				yyv8 := &x.Type
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "TriggeredBy":
			if r.TryDecodeAsNil() {
				x.TriggeredBy = ""
			} else {
				yyv10 := &x.TriggeredBy
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "JobID":
			if r.TryDecodeAsNil() {
				x.JobID = ""
			} else {
				yyv12 := &x.JobID
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "JobModifyIndex":
			if r.TryDecodeAsNil() {
				x.JobModifyIndex = 0
			} else {
				yyv14 := &x.JobModifyIndex
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*uint64)(yyv14)) = uint64(r.DecodeUint(64))
				}
			}
		case "NodeID":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv16 := &x.NodeID
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "NodeModifyIndex":
			if r.TryDecodeAsNil() {
				x.NodeModifyIndex = 0
			} else {
				yyv18 := &x.NodeModifyIndex
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*uint64)(yyv18)) = uint64(r.DecodeUint(64))
				}
			}
		case "Status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				yyv20 := &x.Status
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*string)(yyv20)) = r.DecodeString()
				}
			}
		case "StatusDescription":
			if r.TryDecodeAsNil() {
				x.StatusDescription = ""
			} else {
				yyv22 := &x.StatusDescription
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*string)(yyv22)) = r.DecodeString()
				}
			}
		case "Wait":
			if r.TryDecodeAsNil() {
				x.Wait = 0
			} else {
				yyv24 := &x.Wait
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv24) {
				} else {
					*((*int64)(yyv24)) = int64(r.DecodeInt(64))
				}
			}
		case "NextEval":
			if r.TryDecodeAsNil() {
				x.NextEval = ""
			} else {
				yyv26 := &x.NextEval
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*string)(yyv26)) = r.DecodeString()
				}
			}
		case "PreviousEval":
			if r.TryDecodeAsNil() {
				x.PreviousEval = ""
			} else {
				yyv28 := &x.PreviousEval
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*string)(yyv28)) = r.DecodeString()
				}
			}
		case "BlockedEval":
			if r.TryDecodeAsNil() {
				x.BlockedEval = ""
			} else {
				yyv30 := &x.BlockedEval
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					*((*string)(yyv30)) = r.DecodeString()
				}
			}
		case "FailedTGAllocs":
			if r.TryDecodeAsNil() {
				x.FailedTGAllocs = nil
			} else {
				yyv32 := &x.FailedTGAllocs
				yym33 := z.DecBinary()
				_ = yym33
				if false {
				} else {
					h.decMapstringPtrtoAllocMetric((*map[string]*AllocMetric)(yyv32), d)
				}
			}
		case "ClassEligibility":
			if r.TryDecodeAsNil() {
				x.ClassEligibility = nil
			} else {
				yyv34 := &x.ClassEligibility
				yym35 := z.DecBinary()
				_ = yym35
				if false {
				} else {
					z.F.DecMapStringBoolX(yyv34, false, d)
				}
			}
		case "EscapedComputedClass":
			if r.TryDecodeAsNil() {
				x.EscapedComputedClass = false
			} else {
				yyv36 := &x.EscapedComputedClass
				yym37 := z.DecBinary()
				_ = yym37
				if false {
				} else {
					*((*bool)(yyv36)) = r.DecodeBool()
				}
			}
		case "AnnotatePlan":
			if r.TryDecodeAsNil() {
				x.AnnotatePlan = false
			} else {
				yyv38 := &x.AnnotatePlan
				yym39 := z.DecBinary()
				_ = yym39
				if false {
				} else {
					*((*bool)(yyv38)) = r.DecodeBool()
				}
			}
		case "SnapshotIndex":
			if r.TryDecodeAsNil() {
				x.SnapshotIndex = 0
			} else {
				yyv40 := &x.SnapshotIndex
				yym41 := z.DecBinary()
				_ = yym41
				if false {
				} else {
					*((*uint64)(yyv40)) = uint64(r.DecodeUint(64))
				}
			}
		case "QueuedAllocations":
			if r.TryDecodeAsNil() {
				x.QueuedAllocations = nil
			} else {
				yyv42 := &x.QueuedAllocations
				yym43 := z.DecBinary()
				_ = yym43
				if false {
				} else {
					z.F.DecMapStringIntX(yyv42, false, d)
				}
			}
		case "CreateIndex":
			if r.TryDecodeAsNil() {
				x.CreateIndex = 0
			} else {
				yyv44 := &x.CreateIndex
				yym45 := z.DecBinary()
				_ = yym45
				if false {
				} else {
					*((*uint64)(yyv44)) = uint64(r.DecodeUint(64))
				}
			}
		case "ModifyIndex":
			if r.TryDecodeAsNil() {
				x.ModifyIndex = 0
			} else {
				yyv46 := &x.ModifyIndex
				yym47 := z.DecBinary()
				_ = yym47
				if false {
				} else {
					*((*uint64)(yyv46)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *Evaluation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj48 int
	var yyb48 bool
	var yyhl48 bool = l >= 0
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv49 := &x.ID
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*string)(yyv49)) = r.DecodeString()
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Priority = 0
	} else {
		yyv51 := &x.Priority
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*int)(yyv51)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		yyv53 := &x.Type
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			*((*string)(yyv53)) = r.DecodeString()
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.TriggeredBy = ""
	} else {
		yyv55 := &x.TriggeredBy
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else {
			*((*string)(yyv55)) = r.DecodeString()
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobID = ""
	} else {
		yyv57 := &x.JobID
		yym58 := z.DecBinary()
		_ = yym58
		if false {
		} else {
			*((*string)(yyv57)) = r.DecodeString()
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.JobModifyIndex = 0
	} else {
		yyv59 := &x.JobModifyIndex
		yym60 := z.DecBinary()
		_ = yym60
		if false {
		} else {
			*((*uint64)(yyv59)) = uint64(r.DecodeUint(64))
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv61 := &x.NodeID
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else {
			*((*string)(yyv61)) = r.DecodeString()
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeModifyIndex = 0
	} else {
		yyv63 := &x.NodeModifyIndex
		yym64 := z.DecBinary()
		_ = yym64
		if false {
		} else {
			*((*uint64)(yyv63)) = uint64(r.DecodeUint(64))
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		yyv65 := &x.Status
		yym66 := z.DecBinary()
		_ = yym66
		if false {
		} else {
			*((*string)(yyv65)) = r.DecodeString()
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.StatusDescription = ""
	} else {
		yyv67 := &x.StatusDescription
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else {
			*((*string)(yyv67)) = r.DecodeString()
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Wait = 0
	} else {
		yyv69 := &x.Wait
		yym70 := z.DecBinary()
		_ = yym70
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv69) {
		} else {
			*((*int64)(yyv69)) = int64(r.DecodeInt(64))
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NextEval = ""
	} else {
		yyv71 := &x.NextEval
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else {
			*((*string)(yyv71)) = r.DecodeString()
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.PreviousEval = ""
	} else {
		yyv73 := &x.PreviousEval
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else {
			*((*string)(yyv73)) = r.DecodeString()
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.BlockedEval = ""
	} else {
		yyv75 := &x.BlockedEval
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*string)(yyv75)) = r.DecodeString()
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.FailedTGAllocs = nil
	} else {
		yyv77 := &x.FailedTGAllocs
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			h.decMapstringPtrtoAllocMetric((*map[string]*AllocMetric)(yyv77), d)
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ClassEligibility = nil
	} else {
		yyv79 := &x.ClassEligibility
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringBoolX(yyv79, false, d)
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EscapedComputedClass = false
	} else {
		yyv81 := &x.EscapedComputedClass
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else {
			*((*bool)(yyv81)) = r.DecodeBool()
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AnnotatePlan = false
	} else {
		yyv83 := &x.AnnotatePlan
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else {
			*((*bool)(yyv83)) = r.DecodeBool()
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.SnapshotIndex = 0
	} else {
		yyv85 := &x.SnapshotIndex
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else {
			*((*uint64)(yyv85)) = uint64(r.DecodeUint(64))
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.QueuedAllocations = nil
	} else {
		yyv87 := &x.QueuedAllocations
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			z.F.DecMapStringIntX(yyv87, false, d)
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.CreateIndex = 0
	} else {
		yyv89 := &x.CreateIndex
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*uint64)(yyv89)) = uint64(r.DecodeUint(64))
		}
	}
	yyj48++
	if yyhl48 {
		yyb48 = yyj48 > l
	} else {
		yyb48 = r.CheckBreak()
	}
	if yyb48 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.ModifyIndex = 0
	} else {
		yyv91 := &x.ModifyIndex
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			*((*uint64)(yyv91)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj48++
		if yyhl48 {
			yyb48 = yyj48 > l
		} else {
			yyb48 = r.CheckBreak()
		}
		if yyb48 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj48-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *Plan) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(8)
			} else {
				yynn2 = 8
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalID"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalToken))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("EvalToken"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.EvalToken))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.Priority))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Priority"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.Priority))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeBool(bool(x.AllAtOnce))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllAtOnce"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeBool(bool(x.AllAtOnce))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Job"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Job == nil {
					r.EncodeNil()
				} else {
					x.Job.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.NodeUpdate == nil {
					r.EncodeNil()
				} else {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeUpdate), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeUpdate"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.NodeUpdate == nil {
					r.EncodeNil()
				} else {
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeUpdate), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.NodeAllocation == nil {
					r.EncodeNil()
				} else {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeAllocation), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeAllocation"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.NodeAllocation == nil {
					r.EncodeNil()
				} else {
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeAllocation), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Annotations == nil {
					r.EncodeNil()
				} else {
					x.Annotations.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Annotations"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Annotations == nil {
					r.EncodeNil()
				} else {
					x.Annotations.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *Plan) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *Plan) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "EvalID":
			if r.TryDecodeAsNil() {
				x.EvalID = ""
			} else {
				yyv4 := &x.EvalID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "EvalToken":
			if r.TryDecodeAsNil() {
				x.EvalToken = ""
			} else {
				yyv6 := &x.EvalToken
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "Priority":
			if r.TryDecodeAsNil() {
				x.Priority = 0
			} else {
				yyv8 := &x.Priority
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int)(yyv8)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		case "AllAtOnce":
			if r.TryDecodeAsNil() {
				x.AllAtOnce = false
			} else {
				yyv10 := &x.AllAtOnce
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*bool)(yyv10)) = r.DecodeBool()
				}
			}
		case "Job":
			if r.TryDecodeAsNil() {
				if x.Job != nil {
					x.Job = nil
				}
			} else {
				if x.Job == nil {
					x.Job = new(Job)
				}
				x.Job.CodecDecodeSelf(d)
			}
		case "NodeUpdate":
			if r.TryDecodeAsNil() {
				x.NodeUpdate = nil
			} else {
				yyv13 := &x.NodeUpdate
				yym14 := z.DecBinary()
				_ = yym14
				if false {
				} else {
					h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv13), d)
				}
			}
		case "NodeAllocation":
			if r.TryDecodeAsNil() {
				x.NodeAllocation = nil
			} else {
				yyv15 := &x.NodeAllocation
				yym16 := z.DecBinary()
				_ = yym16
				if false {
				} else {
					h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv15), d)
				}
			}
		case "Annotations":
			if r.TryDecodeAsNil() {
				if x.Annotations != nil {
					x.Annotations = nil
				}
			} else {
				if x.Annotations == nil {
					x.Annotations = new(PlanAnnotations)
				}
				x.Annotations.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *Plan) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalID = ""
	} else {
		yyv19 := &x.EvalID
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.EvalToken = ""
	} else {
		yyv21 := &x.EvalToken
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Priority = 0
	} else {
		yyv23 := &x.Priority
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*int)(yyv23)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllAtOnce = false
	} else {
		yyv25 := &x.AllAtOnce
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*bool)(yyv25)) = r.DecodeBool()
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Job != nil {
			x.Job = nil
		}
	} else {
		if x.Job == nil {
			x.Job = new(Job)
		}
		x.Job.CodecDecodeSelf(d)
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeUpdate = nil
	} else {
		yyv28 := &x.NodeUpdate
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else {
			h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv28), d)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeAllocation = nil
	} else {
		yyv30 := &x.NodeAllocation
		yym31 := z.DecBinary()
		_ = yym31
		if false {
		} else {
			h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv30), d)
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		if x.Annotations != nil {
			x.Annotations = nil
		}
	} else {
		if x.Annotations == nil {
			x.Annotations = new(PlanAnnotations)
		}
		x.Annotations.CodecDecodeSelf(d)
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *PlanResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.NodeUpdate == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeUpdate), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeUpdate"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.NodeUpdate == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeUpdate), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.NodeAllocation == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeAllocation), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NodeAllocation"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.NodeAllocation == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encMapstringSlicePtrtoAllocation((map[string][]*Allocation)(x.NodeAllocation), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.RefreshIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("RefreshIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.RefreshIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.AllocIndex))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("AllocIndex"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.AllocIndex))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *PlanResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *PlanResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "NodeUpdate":
			if r.TryDecodeAsNil() {
				x.NodeUpdate = nil
			} else {
				yyv4 := &x.NodeUpdate
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv4), d)
				}
			}
		case "NodeAllocation":
			if r.TryDecodeAsNil() {
				x.NodeAllocation = nil
			} else {
				yyv6 := &x.NodeAllocation
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv6), d)
				}
			}
		case "RefreshIndex":
			if r.TryDecodeAsNil() {
				x.RefreshIndex = 0
			} else {
				yyv8 := &x.RefreshIndex
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "AllocIndex":
			if r.TryDecodeAsNil() {
				x.AllocIndex = 0
			} else {
				yyv10 := &x.AllocIndex
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *PlanResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeUpdate = nil
	} else {
		yyv13 := &x.NodeUpdate
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv13), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NodeAllocation = nil
	} else {
		yyv15 := &x.NodeAllocation
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			h.decMapstringSlicePtrtoAllocation((*map[string][]*Allocation)(yyv15), d)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.RefreshIndex = 0
	} else {
		yyv17 := &x.RefreshIndex
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.AllocIndex = 0
	} else {
		yyv19 := &x.AllocIndex
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *PlanAnnotations) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.DesiredTGUpdates == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encMapstringPtrtoDesiredUpdates((map[string]*DesiredUpdates)(x.DesiredTGUpdates), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DesiredTGUpdates"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.DesiredTGUpdates == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encMapstringPtrtoDesiredUpdates((map[string]*DesiredUpdates)(x.DesiredTGUpdates), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *PlanAnnotations) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *PlanAnnotations) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "DesiredTGUpdates":
			if r.TryDecodeAsNil() {
				x.DesiredTGUpdates = nil
			} else {
				yyv4 := &x.DesiredTGUpdates
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decMapstringPtrtoDesiredUpdates((*map[string]*DesiredUpdates)(yyv4), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *PlanAnnotations) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DesiredTGUpdates = nil
	} else {
		yyv7 := &x.DesiredTGUpdates
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			h.decMapstringPtrtoDesiredUpdates((*map[string]*DesiredUpdates)(yyv7), d)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *DesiredUpdates) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.Ignore))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Ignore"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.Ignore))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.Place))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Place"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.Place))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeUint(uint64(x.Migrate))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Migrate"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeUint(uint64(x.Migrate))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeUint(uint64(x.Stop))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Stop"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeUint(uint64(x.Stop))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeUint(uint64(x.InPlaceUpdate))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("InPlaceUpdate"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeUint(uint64(x.InPlaceUpdate))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeUint(uint64(x.DestructiveUpdate))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("DestructiveUpdate"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeUint(uint64(x.DestructiveUpdate))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *DesiredUpdates) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *DesiredUpdates) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Ignore":
			if r.TryDecodeAsNil() {
				x.Ignore = 0
			} else {
				yyv4 := &x.Ignore
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		case "Place":
			if r.TryDecodeAsNil() {
				x.Place = 0
			} else {
				yyv6 := &x.Place
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "Migrate":
			if r.TryDecodeAsNil() {
				x.Migrate = 0
			} else {
				yyv8 := &x.Migrate
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*uint64)(yyv8)) = uint64(r.DecodeUint(64))
				}
			}
		case "Stop":
			if r.TryDecodeAsNil() {
				x.Stop = 0
			} else {
				yyv10 := &x.Stop
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*uint64)(yyv10)) = uint64(r.DecodeUint(64))
				}
			}
		case "InPlaceUpdate":
			if r.TryDecodeAsNil() {
				x.InPlaceUpdate = 0
			} else {
				yyv12 := &x.InPlaceUpdate
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*uint64)(yyv12)) = uint64(r.DecodeUint(64))
				}
			}
		case "DestructiveUpdate":
			if r.TryDecodeAsNil() {
				x.DestructiveUpdate = 0
			} else {
				yyv14 := &x.DestructiveUpdate
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*uint64)(yyv14)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *DesiredUpdates) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Ignore = 0
	} else {
		yyv17 := &x.Ignore
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*uint64)(yyv17)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Place = 0
	} else {
		yyv19 := &x.Place
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*uint64)(yyv19)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Migrate = 0
	} else {
		yyv21 := &x.Migrate
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*uint64)(yyv21)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Stop = 0
	} else {
		yyv23 := &x.Stop
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*uint64)(yyv23)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.InPlaceUpdate = 0
	} else {
		yyv25 := &x.InPlaceUpdate
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*uint64)(yyv25)) = uint64(r.DecodeUint(64))
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.DestructiveUpdate = 0
	} else {
		yyv27 := &x.DestructiveUpdate
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*uint64)(yyv27)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *KeyringResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Messages == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncMapStringStringV(x.Messages, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Messages"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Messages == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncMapStringStringV(x.Messages, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				if x.Keys == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						z.F.EncMapStringIntV(x.Keys, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Keys"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				if x.Keys == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						z.F.EncMapStringIntV(x.Keys, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.NumNodes))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("NumNodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.NumNodes))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *KeyringResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *KeyringResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Messages":
			if r.TryDecodeAsNil() {
				x.Messages = nil
			} else {
				yyv4 := &x.Messages
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4, false, d)
				}
			}
		case "Keys":
			if r.TryDecodeAsNil() {
				x.Keys = nil
			} else {
				yyv6 := &x.Keys
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					z.F.DecMapStringIntX(yyv6, false, d)
				}
			}
		case "NumNodes":
			if r.TryDecodeAsNil() {
				x.NumNodes = 0
			} else {
				yyv8 := &x.NumNodes
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int)(yyv8)) = int(r.DecodeInt(codecSelferBitsize120))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *KeyringResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Messages = nil
	} else {
		yyv11 := &x.Messages
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			z.F.DecMapStringStringX(yyv11, false, d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Keys = nil
	} else {
		yyv13 := &x.Keys
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			z.F.DecMapStringIntX(yyv13, false, d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.NumNodes = 0
	} else {
		yyv15 := &x.NumNodes
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*int)(yyv15)) = int(r.DecodeInt(codecSelferBitsize120))
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *KeyringRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Key"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Key))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *KeyringRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *KeyringRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				yyv4 := &x.Key
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *KeyringRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		yyv7 := &x.Key
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*string)(yyv7)) = r.DecodeString()
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x *RecoverableError) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Err))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Err"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8120, string(x.Err))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem120)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeBool(bool(x.Recoverable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey120)
				r.EncodeString(codecSelferC_UTF8120, string("Recoverable"))
				z.EncSendContainerState(codecSelfer_containerMapValue120)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeBool(bool(x.Recoverable))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd120)
			}
		}
	}
}

func (x *RecoverableError) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap120 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd120)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray120 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd120)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr120)
		}
	}
}

func (x *RecoverableError) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey120)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue120)
		switch yys3 {
		case "Err":
			if r.TryDecodeAsNil() {
				x.Err = ""
			} else {
				yyv4 := &x.Err
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "Recoverable":
			if r.TryDecodeAsNil() {
				x.Recoverable = false
			} else {
				yyv6 := &x.Recoverable
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*bool)(yyv6)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x *RecoverableError) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Err = ""
	} else {
		yyv9 := &x.Err
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*string)(yyv9)) = r.DecodeString()
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd120)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem120)
	if r.TryDecodeAsNil() {
		x.Recoverable = false
	} else {
		yyv11 := &x.Recoverable
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*bool)(yyv11)) = r.DecodeBool()
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem120)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) encSlicePtrtoEvaluation(v []*Evaluation, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoEvaluation(v *[]*Evaluation, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Evaluation{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Evaluation, yyrl1)
				}
			} else {
				yyv1 = make([]*Evaluation, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Evaluation{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Evaluation)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Evaluation{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Evaluation)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Evaluation
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Evaluation{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Evaluation)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Evaluation{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encSlicePtrtoAllocation(v []*Allocation, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoAllocation(v *[]*Allocation, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Allocation{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Allocation, yyrl1)
				}
			} else {
				yyv1 = make([]*Allocation, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Allocation{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Allocation)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Allocation{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Allocation)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Allocation
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Allocation{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Allocation)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Allocation{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encSlicePtrtoServerMember(v []*ServerMember, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoServerMember(v *[]*ServerMember, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*ServerMember{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*ServerMember, yyrl1)
				}
			} else {
				yyv1 = make([]*ServerMember, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = ServerMember{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(ServerMember)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ServerMember{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ServerMember)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *ServerMember
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ServerMember{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ServerMember)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*ServerMember{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encnet_IP(v net.IP, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeStringBytes(codecSelferC_RAW120, []byte(v))
}

func (x codecSelfer120) decnet_IP(v *net.IP, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	*v = r.DecodeBytes(*((*[]byte)(v)), false, false)
}

func (x codecSelfer120) encSlicePtrtoVaultAccessor(v []*VaultAccessor, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoVaultAccessor(v *[]*VaultAccessor, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*VaultAccessor{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*VaultAccessor, yyrl1)
				}
			} else {
				yyv1 = make([]*VaultAccessor, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = VaultAccessor{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(VaultAccessor)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = VaultAccessor{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(VaultAccessor)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *VaultAccessor
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = VaultAccessor{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(VaultAccessor)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*VaultAccessor{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encSlicePtrtoNodeServerInfo(v []*NodeServerInfo, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoNodeServerInfo(v *[]*NodeServerInfo, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*NodeServerInfo{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*NodeServerInfo, yyrl1)
				}
			} else {
				yyv1 = make([]*NodeServerInfo, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = NodeServerInfo{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(NodeServerInfo)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeServerInfo{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeServerInfo)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *NodeServerInfo
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeServerInfo{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeServerInfo)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*NodeServerInfo{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encSlicePtrtoNodeListStub(v []*NodeListStub, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoNodeListStub(v *[]*NodeListStub, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*NodeListStub{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*NodeListStub, yyrl1)
				}
			} else {
				yyv1 = make([]*NodeListStub, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = NodeListStub{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(NodeListStub)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeListStub)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *NodeListStub
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NodeListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NodeListStub)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*NodeListStub{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encSlicePtrtoJobListStub(v []*JobListStub, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoJobListStub(v *[]*JobListStub, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*JobListStub{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*JobListStub, yyrl1)
				}
			} else {
				yyv1 = make([]*JobListStub, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = JobListStub{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(JobListStub)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = JobListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(JobListStub)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *JobListStub
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = JobListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(JobListStub)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*JobListStub{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encMapstringPtrtoAllocMetric(v map[string]*AllocMetric, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey120)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8120, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd120)
}

func (x codecSelfer120) decMapstringPtrtoAllocMetric(v *map[string]*AllocMetric, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*AllocMetric, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *AllocMetric
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey120)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue120)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = AllocMetric{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(AllocMetric)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey120)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue120)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = AllocMetric{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(AllocMetric)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x codecSelfer120) encSlicePtrtoAllocListStub(v []*AllocListStub, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoAllocListStub(v *[]*AllocListStub, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*AllocListStub{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*AllocListStub, yyrl1)
				}
			} else {
				yyv1 = make([]*AllocListStub, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = AllocListStub{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(AllocListStub)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = AllocListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(AllocListStub)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *AllocListStub
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = AllocListStub{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(AllocListStub)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*AllocListStub{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encSlicePtrtoNetworkResource(v []*NetworkResource, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoNetworkResource(v *[]*NetworkResource, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*NetworkResource{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*NetworkResource, yyrl1)
				}
			} else {
				yyv1 = make([]*NetworkResource, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = NetworkResource{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(NetworkResource)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NetworkResource{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NetworkResource)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *NetworkResource
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = NetworkResource{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(NetworkResource)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*NetworkResource{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encSlicePort(v []Port, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePort(v *[]Port, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Port{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Port, yyrl1)
				}
			} else {
				yyv1 = make([]Port, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = Port{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, Port{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Port{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Port{}) // var yyz1 Port
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Port{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []Port{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encSlicePtrtoConstraint(v []*Constraint, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoConstraint(v *[]*Constraint, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Constraint{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Constraint, yyrl1)
				}
			} else {
				yyv1 = make([]*Constraint, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Constraint{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Constraint)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Constraint{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Constraint)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Constraint
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Constraint{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Constraint)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Constraint{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encSlicePtrtoTaskGroup(v []*TaskGroup, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoTaskGroup(v *[]*TaskGroup, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*TaskGroup{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*TaskGroup, yyrl1)
				}
			} else {
				yyv1 = make([]*TaskGroup, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = TaskGroup{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(TaskGroup)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskGroup{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskGroup)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *TaskGroup
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskGroup{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskGroup)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*TaskGroup{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encMapstringTaskGroupSummary(v map[string]TaskGroupSummary, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey120)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8120, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue120)
		yy3 := &yyv1
		yy3.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd120)
}

func (x codecSelfer120) decMapstringTaskGroupSummary(v *map[string]TaskGroupSummary, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 64)
		yyv1 = make(map[string]TaskGroupSummary, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 TaskGroupSummary
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey120)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = TaskGroupSummary{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue120)
			if r.TryDecodeAsNil() {
				yymv1 = TaskGroupSummary{}
			} else {
				yyv4 := &yymv1
				yyv4.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey120)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = TaskGroupSummary{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue120)
			if r.TryDecodeAsNil() {
				yymv1 = TaskGroupSummary{}
			} else {
				yyv7 := &yymv1
				yyv7.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x codecSelfer120) encSlicePtrtoTask(v []*Task, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoTask(v *[]*Task, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Task{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Task, yyrl1)
				}
			} else {
				yyv1 = make([]*Task, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Task{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Task)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Task{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Task)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Task
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Task{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Task)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Task{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encSlicePtrtoServiceCheck(v []*ServiceCheck, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoServiceCheck(v *[]*ServiceCheck, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*ServiceCheck{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*ServiceCheck, yyrl1)
				}
			} else {
				yyv1 = make([]*ServiceCheck, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = ServiceCheck{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(ServiceCheck)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ServiceCheck{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ServiceCheck)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *ServiceCheck
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = ServiceCheck{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(ServiceCheck)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*ServiceCheck{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encSlicePtrtoService(v []*Service, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoService(v *[]*Service, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Service{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Service, yyrl1)
				}
			} else {
				yyv1 = make([]*Service, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Service{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Service)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Service{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Service)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Service
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Service{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Service)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Service{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encSlicePtrtoTemplate(v []*Template, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoTemplate(v *[]*Template, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*Template{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*Template, yyrl1)
				}
			} else {
				yyv1 = make([]*Template, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = Template{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(Template)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Template{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Template)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *Template
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = Template{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(Template)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*Template{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encSlicePtrtoTaskArtifact(v []*TaskArtifact, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoTaskArtifact(v *[]*TaskArtifact, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*TaskArtifact{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*TaskArtifact, yyrl1)
				}
			} else {
				yyv1 = make([]*TaskArtifact, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = TaskArtifact{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(TaskArtifact)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskArtifact{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskArtifact)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *TaskArtifact
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskArtifact{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskArtifact)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*TaskArtifact{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encSlicePtrtoTaskEvent(v []*TaskEvent, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd120)
}

func (x codecSelfer120) decSlicePtrtoTaskEvent(v *[]*TaskEvent, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []*TaskEvent{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]*TaskEvent, yyrl1)
				}
			} else {
				yyv1 = make([]*TaskEvent, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				if yyv1[yyj1] != nil {
					*yyv1[yyj1] = TaskEvent{}
				}
			} else {
				if yyv1[yyj1] == nil {
					yyv1[yyj1] = new(TaskEvent)
				}
				yyw2 := yyv1[yyj1]
				yyw2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, nil)
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskEvent{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskEvent)
					}
					yyw3 := yyv1[yyj1]
					yyw3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil) // var yyz1 *TaskEvent
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					if yyv1[yyj1] != nil {
						*yyv1[yyj1] = TaskEvent{}
					}
				} else {
					if yyv1[yyj1] == nil {
						yyv1[yyj1] = new(TaskEvent)
					}
					yyw4 := yyv1[yyj1]
					yyw4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []*TaskEvent{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer120) encMapstringPtrtoResources(v map[string]*Resources, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey120)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8120, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd120)
}

func (x codecSelfer120) decMapstringPtrtoResources(v *map[string]*Resources, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*Resources, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *Resources
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey120)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue120)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = Resources{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(Resources)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey120)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue120)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = Resources{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(Resources)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x codecSelfer120) encMapstringPtrtoTaskState(v map[string]*TaskState, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey120)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8120, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd120)
}

func (x codecSelfer120) decMapstringPtrtoTaskState(v *map[string]*TaskState, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*TaskState, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *TaskState
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey120)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue120)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = TaskState{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(TaskState)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey120)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue120)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = TaskState{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(TaskState)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x codecSelfer120) encMapstringSlicePtrtoAllocation(v map[string][]*Allocation, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey120)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8120, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yym3 := z.EncBinary()
			_ = yym3
			if false {
			} else {
				h.encSlicePtrtoAllocation(([]*Allocation)(yyv1), e)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd120)
}

func (x codecSelfer120) decMapstringSlicePtrtoAllocation(v *map[string][]*Allocation, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 40)
		yyv1 = make(map[string][]*Allocation, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 []*Allocation
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey120)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue120)
			if r.TryDecodeAsNil() {
				yymv1 = nil
			} else {
				yyv4 := &yymv1
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSlicePtrtoAllocation((*[]*Allocation)(yyv4), d)
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey120)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv6 := &yymk1
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue120)
			if r.TryDecodeAsNil() {
				yymv1 = nil
			} else {
				yyv8 := &yymv1
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					h.decSlicePtrtoAllocation((*[]*Allocation)(yyv8), d)
				}
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}

func (x codecSelfer120) encMapstringPtrtoDesiredUpdates(v map[string]*DesiredUpdates, e *codec1978.Encoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey120)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8120, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue120)
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yyv1.CodecEncodeSelf(e)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd120)
}

func (x codecSelfer120) decMapstringPtrtoDesiredUpdates(v *map[string]*DesiredUpdates, d *codec1978.Decoder) {
	var h codecSelfer120
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 24)
		yyv1 = make(map[string]*DesiredUpdates, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 *DesiredUpdates
	var yymg1, yyms1, yymok1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey120)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue120)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = DesiredUpdates{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(DesiredUpdates)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey120)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			yyms1 = true
			if yymg1 {
				yymv1, yymok1 = yyv1[yymk1]
				if yymok1 {
					yyms1 = false
				}
			} else {
				yymv1 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue120)
			if r.TryDecodeAsNil() {
				if yymv1 != nil {
					*yymv1 = DesiredUpdates{}
				}
			} else {
				if yymv1 == nil {
					yymv1 = new(DesiredUpdates)
				}
				yymv1.CodecDecodeSelf(d)
			}

			if yyms1 && yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd120)
}
